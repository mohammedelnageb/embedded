
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002e1e  00002eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800068  00800068  00002eba  2**0
                  ALLOC
  3 .stab         0000210c  00000000  00000000  00002ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dd5  00000000  00000000  00004fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000604d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009930  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a4eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 37       	cpi	r26, 0x7F	; 127
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e1       	ldi	r30, 0x1E	; 30
      78:	fe e2       	ldi	r31, 0x2E	; 46
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
unsigned char z=0;
unsigned char operation[SIZE] ={0};
unsigned char sum;
#define DELAY 500
int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a0 97       	sbiw	r28, 0x20	; 32
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 LCD_init();
     b5a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <LCD_init>
	while(1)
	{



	 x= KEYPAD_getPressedKey();
     b5e:	0e 94 98 0a 	call	0x1530	; 0x1530 <KEYPAD_getPressedKey>
     b62:	80 93 7d 00 	sts	0x007D, r24

	 if(x>=0&&x<=9)
     b66:	80 91 7d 00 	lds	r24, 0x007D
     b6a:	8a 30       	cpi	r24, 0x0A	; 10
     b6c:	38 f5       	brcc	.+78     	; 0xbbc <main+0x76>
	 {
		 LCD_intgerToString(x);
     b6e:	80 91 7d 00 	lds	r24, 0x007D
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_intgerToString>
         y[z]=10*y[z]+x;
     b7a:	80 91 72 00 	lds	r24, 0x0072
     b7e:	48 2f       	mov	r20, r24
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	80 91 72 00 	lds	r24, 0x0072
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	e8 59       	subi	r30, 0x98	; 152
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	80 81       	ld	r24, Z
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	9c 01       	movw	r18, r24
     b98:	22 0f       	add	r18, r18
     b9a:	33 1f       	adc	r19, r19
     b9c:	c9 01       	movw	r24, r18
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	82 0f       	add	r24, r18
     ba8:	93 1f       	adc	r25, r19
     baa:	98 2f       	mov	r25, r24
     bac:	80 91 7d 00 	lds	r24, 0x007D
     bb0:	89 0f       	add	r24, r25
     bb2:	fa 01       	movw	r30, r20
     bb4:	e8 59       	subi	r30, 0x98	; 152
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	80 83       	st	Z, r24
     bba:	09 c1       	rjmp	.+530    	; 0xdce <main+0x288>

	 }
	 else if(x=='=')
     bbc:	80 91 7d 00 	lds	r24, 0x007D
     bc0:	8d 33       	cpi	r24, 0x3D	; 61
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <main+0x80>
     bc4:	7f c0       	rjmp	.+254    	; 0xcc4 <main+0x17e>
	 {
			LCD_displayCharacter(x);
     bc6:	80 91 7d 00 	lds	r24, 0x007D
     bca:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_displayCharacter>
			 sum =y[0];
     bce:	80 91 68 00 	lds	r24, 0x0068
     bd2:	80 93 7e 00 	sts	0x007E, r24

 			for(int i=1;i<=z;i++)
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9e 8f       	std	Y+30, r25	; 0x1e
     bdc:	8d 8f       	std	Y+29, r24	; 0x1d
     bde:	61 c0       	rjmp	.+194    	; 0xca2 <main+0x15c>
 			{
		 switch (operation[i-1])
     be0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     be2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	fc 01       	movw	r30, r24
     be8:	ed 58       	subi	r30, 0x8D	; 141
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	80 81       	ld	r24, Z
     bee:	28 2f       	mov	r18, r24
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	38 a3       	std	Y+32, r19	; 0x20
     bf4:	2f 8f       	std	Y+31, r18	; 0x1f
     bf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bf8:	98 a1       	ldd	r25, Y+32	; 0x20
     bfa:	8b 32       	cpi	r24, 0x2B	; 43
     bfc:	91 05       	cpc	r25, r1
     bfe:	b1 f0       	breq	.+44     	; 0xc2c <main+0xe6>
     c00:	2f 8d       	ldd	r18, Y+31	; 0x1f
     c02:	38 a1       	ldd	r19, Y+32	; 0x20
     c04:	2c 32       	cpi	r18, 0x2C	; 44
     c06:	31 05       	cpc	r19, r1
     c08:	34 f4       	brge	.+12     	; 0xc16 <main+0xd0>
     c0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c0c:	98 a1       	ldd	r25, Y+32	; 0x20
     c0e:	8a 32       	cpi	r24, 0x2A	; 42
     c10:	91 05       	cpc	r25, r1
     c12:	c1 f0       	breq	.+48     	; 0xc44 <main+0xfe>
     c14:	41 c0       	rjmp	.+130    	; 0xc98 <main+0x152>
     c16:	2f 8d       	ldd	r18, Y+31	; 0x1f
     c18:	38 a1       	ldd	r19, Y+32	; 0x20
     c1a:	2d 32       	cpi	r18, 0x2D	; 45
     c1c:	31 05       	cpc	r19, r1
     c1e:	79 f1       	breq	.+94     	; 0xc7e <main+0x138>
     c20:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c22:	98 a1       	ldd	r25, Y+32	; 0x20
     c24:	8f 32       	cpi	r24, 0x2F	; 47
     c26:	91 05       	cpc	r25, r1
     c28:	d9 f0       	breq	.+54     	; 0xc60 <main+0x11a>
     c2a:	36 c0       	rjmp	.+108    	; 0xc98 <main+0x152>
		 		 {
		 		 case '+':
		 			sum=y[i]+sum;
     c2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c30:	fc 01       	movw	r30, r24
     c32:	e8 59       	subi	r30, 0x98	; 152
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	90 81       	ld	r25, Z
     c38:	80 91 7e 00 	lds	r24, 0x007E
     c3c:	89 0f       	add	r24, r25
     c3e:	80 93 7e 00 	sts	0x007E, r24
     c42:	2a c0       	rjmp	.+84     	; 0xc98 <main+0x152>

		 			 break;
		 		 case '*':
		 			 sum=y[i]*sum;
     c44:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c46:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c48:	fc 01       	movw	r30, r24
     c4a:	e8 59       	subi	r30, 0x98	; 152
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	90 81       	ld	r25, Z
     c50:	80 91 7e 00 	lds	r24, 0x007E
     c54:	98 9f       	mul	r25, r24
     c56:	80 2d       	mov	r24, r0
     c58:	11 24       	eor	r1, r1
     c5a:	80 93 7e 00 	sts	0x007E, r24
     c5e:	1c c0       	rjmp	.+56     	; 0xc98 <main+0x152>
		 			 break;

		 		 case '/':
		 	 		 sum=sum/y[i];
     c60:	20 91 7e 00 	lds	r18, 0x007E
     c64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c66:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c68:	fc 01       	movw	r30, r24
     c6a:	e8 59       	subi	r30, 0x98	; 152
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	90 81       	ld	r25, Z
     c70:	82 2f       	mov	r24, r18
     c72:	69 2f       	mov	r22, r25
     c74:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__udivmodqi4>
     c78:	80 93 7e 00 	sts	0x007E, r24
     c7c:	0d c0       	rjmp	.+26     	; 0xc98 <main+0x152>

		 			 break;

		 		 case '-':
		 	 		 sum=sum-y[i];
     c7e:	20 91 7e 00 	lds	r18, 0x007E
     c82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c84:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c86:	fc 01       	movw	r30, r24
     c88:	e8 59       	subi	r30, 0x98	; 152
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	80 81       	ld	r24, Z
     c8e:	92 2f       	mov	r25, r18
     c90:	98 1b       	sub	r25, r24
     c92:	89 2f       	mov	r24, r25
     c94:	80 93 7e 00 	sts	0x007E, r24
	 else if(x=='=')
	 {
			LCD_displayCharacter(x);
			 sum =y[0];

 			for(int i=1;i<=z;i++)
     c98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	9e 8f       	std	Y+30, r25	; 0x1e
     ca0:	8d 8f       	std	Y+29, r24	; 0x1d
     ca2:	80 91 72 00 	lds	r24, 0x0072
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cac:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	0c f0       	brlt	.+2      	; 0xcb6 <main+0x170>
     cb4:	95 cf       	rjmp	.-214    	; 0xbe0 <main+0x9a>
		 			 break;

		 		 }

 			}
 			LCD_intgerToString(sum);
     cb6:	80 91 7e 00 	lds	r24, 0x007E
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <LCD_intgerToString>
     cc2:	85 c0       	rjmp	.+266    	; 0xdce <main+0x288>

	 }
	 else
	 {
		operation[z]= x;
     cc4:	80 91 72 00 	lds	r24, 0x0072
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	20 91 7d 00 	lds	r18, 0x007D
     cd0:	fc 01       	movw	r30, r24
     cd2:	ed 58       	subi	r30, 0x8D	; 141
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	20 83       	st	Z, r18
				LCD_displayCharacter(x);
     cd8:	80 91 7d 00 	lds	r24, 0x007D
     cdc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_displayCharacter>

             z++;
     ce0:	80 91 72 00 	lds	r24, 0x0072
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	80 93 72 00 	sts	0x0072, r24
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	aa ef       	ldi	r26, 0xFA	; 250
     cf0:	b3 e4       	ldi	r27, 0x43	; 67
     cf2:	89 8f       	std	Y+25, r24	; 0x19
     cf4:	9a 8f       	std	Y+26, r25	; 0x1a
     cf6:	ab 8f       	std	Y+27, r26	; 0x1b
     cf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfa:	69 8d       	ldd	r22, Y+25	; 0x19
     cfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4a e7       	ldi	r20, 0x7A	; 122
     d08:	53 e4       	ldi	r21, 0x43	; 67
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	8d 8b       	std	Y+21, r24	; 0x15
     d14:	9e 8b       	std	Y+22, r25	; 0x16
     d16:	af 8b       	std	Y+23, r26	; 0x17
     d18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d1a:	6d 89       	ldd	r22, Y+21	; 0x15
     d1c:	7e 89       	ldd	r23, Y+22	; 0x16
     d1e:	8f 89       	ldd	r24, Y+23	; 0x17
     d20:	98 8d       	ldd	r25, Y+24	; 0x18
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d2e:	88 23       	and	r24, r24
     d30:	2c f4       	brge	.+10     	; 0xd3c <main+0x1f6>
		__ticks = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9c 8b       	std	Y+20, r25	; 0x14
     d38:	8b 8b       	std	Y+19, r24	; 0x13
     d3a:	3f c0       	rjmp	.+126    	; 0xdba <main+0x274>
	else if (__tmp > 65535)
     d3c:	6d 89       	ldd	r22, Y+21	; 0x15
     d3e:	7e 89       	ldd	r23, Y+22	; 0x16
     d40:	8f 89       	ldd	r24, Y+23	; 0x17
     d42:	98 8d       	ldd	r25, Y+24	; 0x18
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	57 e4       	ldi	r21, 0x47	; 71
     d4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d50:	18 16       	cp	r1, r24
     d52:	4c f5       	brge	.+82     	; 0xda6 <main+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d54:	69 8d       	ldd	r22, Y+25	; 0x19
     d56:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e2       	ldi	r20, 0x20	; 32
     d62:	51 e4       	ldi	r21, 0x41	; 65
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	9c 8b       	std	Y+20, r25	; 0x14
     d7a:	8b 8b       	std	Y+19, r24	; 0x13
     d7c:	0f c0       	rjmp	.+30     	; 0xd9c <main+0x256>
     d7e:	89 e1       	ldi	r24, 0x19	; 25
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9a 8b       	std	Y+18, r25	; 0x12
     d84:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d86:	89 89       	ldd	r24, Y+17	; 0x11
     d88:	9a 89       	ldd	r25, Y+18	; 0x12
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <main+0x244>
     d8e:	9a 8b       	std	Y+18, r25	; 0x12
     d90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d92:	8b 89       	ldd	r24, Y+19	; 0x13
     d94:	9c 89       	ldd	r25, Y+20	; 0x14
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	9c 8b       	std	Y+20, r25	; 0x14
     d9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d9c:	8b 89       	ldd	r24, Y+19	; 0x13
     d9e:	9c 89       	ldd	r25, Y+20	; 0x14
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	69 f7       	brne	.-38     	; 0xd7e <main+0x238>
     da4:	14 c0       	rjmp	.+40     	; 0xdce <main+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da6:	6d 89       	ldd	r22, Y+21	; 0x15
     da8:	7e 89       	ldd	r23, Y+22	; 0x16
     daa:	8f 89       	ldd	r24, Y+23	; 0x17
     dac:	98 8d       	ldd	r25, Y+24	; 0x18
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9c 8b       	std	Y+20, r25	; 0x14
     db8:	8b 8b       	std	Y+19, r24	; 0x13
     dba:	8b 89       	ldd	r24, Y+19	; 0x13
     dbc:	9c 89       	ldd	r25, Y+20	; 0x14
     dbe:	98 8b       	std	Y+16, r25	; 0x10
     dc0:	8f 87       	std	Y+15, r24	; 0x0f
     dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc4:	98 89       	ldd	r25, Y+16	; 0x10
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <main+0x280>
     dca:	98 8b       	std	Y+16, r25	; 0x10
     dcc:	8f 87       	std	Y+15, r24	; 0x0f
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	aa ef       	ldi	r26, 0xFA	; 250
     dd4:	b3 e4       	ldi	r27, 0x43	; 67
     dd6:	8b 87       	std	Y+11, r24	; 0x0b
     dd8:	9c 87       	std	Y+12, r25	; 0x0c
     dda:	ad 87       	std	Y+13, r26	; 0x0d
     ddc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dde:	6b 85       	ldd	r22, Y+11	; 0x0b
     de0:	7c 85       	ldd	r23, Y+12	; 0x0c
     de2:	8d 85       	ldd	r24, Y+13	; 0x0d
     de4:	9e 85       	ldd	r25, Y+14	; 0x0e
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	4a e7       	ldi	r20, 0x7A	; 122
     dec:	53 e4       	ldi	r21, 0x43	; 67
     dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	8f 83       	std	Y+7, r24	; 0x07
     df8:	98 87       	std	Y+8, r25	; 0x08
     dfa:	a9 87       	std	Y+9, r26	; 0x09
     dfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dfe:	6f 81       	ldd	r22, Y+7	; 0x07
     e00:	78 85       	ldd	r23, Y+8	; 0x08
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e8       	ldi	r20, 0x80	; 128
     e0c:	5f e3       	ldi	r21, 0x3F	; 63
     e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e12:	88 23       	and	r24, r24
     e14:	2c f4       	brge	.+10     	; 0xe20 <main+0x2da>
		__ticks = 1;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	3f c0       	rjmp	.+126    	; 0xe9e <main+0x358>
	else if (__tmp > 65535)
     e20:	6f 81       	ldd	r22, Y+7	; 0x07
     e22:	78 85       	ldd	r23, Y+8	; 0x08
     e24:	89 85       	ldd	r24, Y+9	; 0x09
     e26:	9a 85       	ldd	r25, Y+10	; 0x0a
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	3f ef       	ldi	r19, 0xFF	; 255
     e2c:	4f e7       	ldi	r20, 0x7F	; 127
     e2e:	57 e4       	ldi	r21, 0x47	; 71
     e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e34:	18 16       	cp	r1, r24
     e36:	4c f5       	brge	.+82     	; 0xe8a <main+0x344>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e38:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e2       	ldi	r20, 0x20	; 32
     e46:	51 e4       	ldi	r21, 0x41	; 65
     e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	bc 01       	movw	r22, r24
     e52:	cd 01       	movw	r24, r26
     e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	8d 83       	std	Y+5, r24	; 0x05
     e60:	0f c0       	rjmp	.+30     	; 0xe80 <main+0x33a>
     e62:	89 e1       	ldi	r24, 0x19	; 25
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9c 83       	std	Y+4, r25	; 0x04
     e68:	8b 83       	std	Y+3, r24	; 0x03
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <main+0x328>
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9e 81       	ldd	r25, Y+6	; 0x06
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	9e 83       	std	Y+6, r25	; 0x06
     e7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	69 f7       	brne	.-38     	; 0xe62 <main+0x31c>
     e88:	6a ce       	rjmp	.-812    	; 0xb5e <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <main+0x364>
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	55 ce       	rjmp	.-854    	; 0xb5e <main+0x18>

00000eb4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <GPIO_setupPinDirection+0x6>
     eba:	00 d0       	rcall	.+0      	; 0xebc <GPIO_setupPinDirection+0x8>
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02
     ec6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	88 30       	cpi	r24, 0x08	; 8
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <GPIO_setupPinDirection+0x1c>
     ece:	d5 c0       	rjmp	.+426    	; 0x107a <GPIO_setupPinDirection+0x1c6>
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	84 30       	cpi	r24, 0x04	; 4
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <GPIO_setupPinDirection+0x24>
     ed6:	d1 c0       	rjmp	.+418    	; 0x107a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3d 83       	std	Y+5, r19	; 0x05
     ee0:	2c 83       	std	Y+4, r18	; 0x04
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <GPIO_setupPinDirection+0x3a>
     eec:	43 c0       	rjmp	.+134    	; 0xf74 <GPIO_setupPinDirection+0xc0>
     eee:	2c 81       	ldd	r18, Y+4	; 0x04
     ef0:	3d 81       	ldd	r19, Y+5	; 0x05
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	2c f4       	brge	.+10     	; 0xf02 <GPIO_setupPinDirection+0x4e>
     ef8:	8c 81       	ldd	r24, Y+4	; 0x04
     efa:	9d 81       	ldd	r25, Y+5	; 0x05
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	71 f0       	breq	.+28     	; 0xf1c <GPIO_setupPinDirection+0x68>
     f00:	bc c0       	rjmp	.+376    	; 0x107a <GPIO_setupPinDirection+0x1c6>
     f02:	2c 81       	ldd	r18, Y+4	; 0x04
     f04:	3d 81       	ldd	r19, Y+5	; 0x05
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	31 05       	cpc	r19, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <GPIO_setupPinDirection+0x5a>
     f0c:	5f c0       	rjmp	.+190    	; 0xfcc <GPIO_setupPinDirection+0x118>
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	9d 81       	ldd	r25, Y+5	; 0x05
     f12:	83 30       	cpi	r24, 0x03	; 3
     f14:	91 05       	cpc	r25, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <GPIO_setupPinDirection+0x66>
     f18:	85 c0       	rjmp	.+266    	; 0x1024 <GPIO_setupPinDirection+0x170>
     f1a:	af c0       	rjmp	.+350    	; 0x107a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	a1 f4       	brne	.+40     	; 0xf4a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f22:	aa e3       	ldi	r26, 0x3A	; 58
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e3       	ldi	r30, 0x3A	; 58
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <GPIO_setupPinDirection+0x8c>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <GPIO_setupPinDirection+0x88>
     f44:	84 2b       	or	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	98 c0       	rjmp	.+304    	; 0x107a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f4a:	aa e3       	ldi	r26, 0x3A	; 58
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ea e3       	ldi	r30, 0x3A	; 58
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <GPIO_setupPinDirection+0xb4>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <GPIO_setupPinDirection+0xb0>
     f6c:	80 95       	com	r24
     f6e:	84 23       	and	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	83 c0       	rjmp	.+262    	; 0x107a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	a1 f4       	brne	.+40     	; 0xfa2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f7a:	a7 e3       	ldi	r26, 0x37	; 55
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e7 e3       	ldi	r30, 0x37	; 55
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <GPIO_setupPinDirection+0xe4>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <GPIO_setupPinDirection+0xe0>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	6c c0       	rjmp	.+216    	; 0x107a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fa2:	a7 e3       	ldi	r26, 0x37	; 55
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e7 e3       	ldi	r30, 0x37	; 55
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_setupPinDirection+0x10c>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_setupPinDirection+0x108>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	57 c0       	rjmp	.+174    	; 0x107a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	a1 f4       	brne	.+40     	; 0xffa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fd2:	a4 e3       	ldi	r26, 0x34	; 52
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e4 e3       	ldi	r30, 0x34	; 52
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_setupPinDirection+0x13c>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_setupPinDirection+0x138>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	40 c0       	rjmp	.+128    	; 0x107a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ffa:	a4 e3       	ldi	r26, 0x34	; 52
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e4 e3       	ldi	r30, 0x34	; 52
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <GPIO_setupPinDirection+0x164>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <GPIO_setupPinDirection+0x160>
    101c:	80 95       	com	r24
    101e:	84 23       	and	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	2b c0       	rjmp	.+86     	; 0x107a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	a1 f4       	brne	.+40     	; 0x1052 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    102a:	a1 e3       	ldi	r26, 0x31	; 49
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e1 e3       	ldi	r30, 0x31	; 49
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_setupPinDirection+0x194>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_setupPinDirection+0x190>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	14 c0       	rjmp	.+40     	; 0x107a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1052:	a1 e3       	ldi	r26, 0x31	; 49
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e1 e3       	ldi	r30, 0x31	; 49
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <GPIO_setupPinDirection+0x1bc>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <GPIO_setupPinDirection+0x1b8>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <GPIO_writePin+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <GPIO_writePin+0x8>
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	6a 83       	std	Y+2, r22	; 0x02
    109c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	88 30       	cpi	r24, 0x08	; 8
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <GPIO_writePin+0x1c>
    10a4:	d5 c0       	rjmp	.+426    	; 0x1250 <GPIO_writePin+0x1c6>
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <GPIO_writePin+0x24>
    10ac:	d1 c0       	rjmp	.+418    	; 0x1250 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	3d 83       	std	Y+5, r19	; 0x05
    10b6:	2c 83       	std	Y+4, r18	; 0x04
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	9d 81       	ldd	r25, Y+5	; 0x05
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <GPIO_writePin+0x3a>
    10c2:	43 c0       	rjmp	.+134    	; 0x114a <GPIO_writePin+0xc0>
    10c4:	2c 81       	ldd	r18, Y+4	; 0x04
    10c6:	3d 81       	ldd	r19, Y+5	; 0x05
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <GPIO_writePin+0x4e>
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	71 f0       	breq	.+28     	; 0x10f2 <GPIO_writePin+0x68>
    10d6:	bc c0       	rjmp	.+376    	; 0x1250 <GPIO_writePin+0x1c6>
    10d8:	2c 81       	ldd	r18, Y+4	; 0x04
    10da:	3d 81       	ldd	r19, Y+5	; 0x05
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <GPIO_writePin+0x5a>
    10e2:	5f c0       	rjmp	.+190    	; 0x11a2 <GPIO_writePin+0x118>
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <GPIO_writePin+0x66>
    10ee:	85 c0       	rjmp	.+266    	; 0x11fa <GPIO_writePin+0x170>
    10f0:	af c0       	rjmp	.+350    	; 0x1250 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	a1 f4       	brne	.+40     	; 0x1120 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10f8:	ab e3       	ldi	r26, 0x3B	; 59
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	eb e3       	ldi	r30, 0x3B	; 59
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <GPIO_writePin+0x8c>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <GPIO_writePin+0x88>
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	98 c0       	rjmp	.+304    	; 0x1250 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1120:	ab e3       	ldi	r26, 0x3B	; 59
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	eb e3       	ldi	r30, 0x3B	; 59
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_writePin+0xb4>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_writePin+0xb0>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	83 c0       	rjmp	.+262    	; 0x1250 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	a1 f4       	brne	.+40     	; 0x1178 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1150:	a8 e3       	ldi	r26, 0x38	; 56
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e8 e3       	ldi	r30, 0x38	; 56
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <GPIO_writePin+0xe4>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <GPIO_writePin+0xe0>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	6c c0       	rjmp	.+216    	; 0x1250 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1178:	a8 e3       	ldi	r26, 0x38	; 56
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e8 e3       	ldi	r30, 0x38	; 56
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <GPIO_writePin+0x10c>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <GPIO_writePin+0x108>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	57 c0       	rjmp	.+174    	; 0x1250 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	a1 f4       	brne	.+40     	; 0x11d0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11a8:	a5 e3       	ldi	r26, 0x35	; 53
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e3       	ldi	r30, 0x35	; 53
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_writePin+0x13c>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <GPIO_writePin+0x138>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	40 c0       	rjmp	.+128    	; 0x1250 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11d0:	a5 e3       	ldi	r26, 0x35	; 53
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e3       	ldi	r30, 0x35	; 53
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <GPIO_writePin+0x164>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <GPIO_writePin+0x160>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	2b c0       	rjmp	.+86     	; 0x1250 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	a1 f4       	brne	.+40     	; 0x1228 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1200:	a2 e3       	ldi	r26, 0x32	; 50
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e2 e3       	ldi	r30, 0x32	; 50
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <GPIO_writePin+0x194>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <GPIO_writePin+0x190>
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	14 c0       	rjmp	.+40     	; 0x1250 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1228:	a2 e3       	ldi	r26, 0x32	; 50
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e2 e3       	ldi	r30, 0x32	; 50
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <GPIO_writePin+0x1bc>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <GPIO_writePin+0x1b8>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <GPIO_readPin+0x6>
    1266:	00 d0       	rcall	.+0      	; 0x1268 <GPIO_readPin+0x8>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	8a 83       	std	Y+2, r24	; 0x02
    1270:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1272:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	88 30       	cpi	r24, 0x08	; 8
    1278:	08 f0       	brcs	.+2      	; 0x127c <GPIO_readPin+0x1c>
    127a:	84 c0       	rjmp	.+264    	; 0x1384 <GPIO_readPin+0x124>
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	08 f0       	brcs	.+2      	; 0x1284 <GPIO_readPin+0x24>
    1282:	80 c0       	rjmp	.+256    	; 0x1384 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	3d 83       	std	Y+5, r19	; 0x05
    128c:	2c 83       	std	Y+4, r18	; 0x04
    128e:	4c 81       	ldd	r20, Y+4	; 0x04
    1290:	5d 81       	ldd	r21, Y+5	; 0x05
    1292:	41 30       	cpi	r20, 0x01	; 1
    1294:	51 05       	cpc	r21, r1
    1296:	79 f1       	breq	.+94     	; 0x12f6 <GPIO_readPin+0x96>
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	9d 81       	ldd	r25, Y+5	; 0x05
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	91 05       	cpc	r25, r1
    12a0:	34 f4       	brge	.+12     	; 0x12ae <GPIO_readPin+0x4e>
    12a2:	2c 81       	ldd	r18, Y+4	; 0x04
    12a4:	3d 81       	ldd	r19, Y+5	; 0x05
    12a6:	21 15       	cp	r18, r1
    12a8:	31 05       	cpc	r19, r1
    12aa:	69 f0       	breq	.+26     	; 0x12c6 <GPIO_readPin+0x66>
    12ac:	6b c0       	rjmp	.+214    	; 0x1384 <GPIO_readPin+0x124>
    12ae:	4c 81       	ldd	r20, Y+4	; 0x04
    12b0:	5d 81       	ldd	r21, Y+5	; 0x05
    12b2:	42 30       	cpi	r20, 0x02	; 2
    12b4:	51 05       	cpc	r21, r1
    12b6:	b9 f1       	breq	.+110    	; 0x1326 <GPIO_readPin+0xc6>
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	91 05       	cpc	r25, r1
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <GPIO_readPin+0x64>
    12c2:	49 c0       	rjmp	.+146    	; 0x1356 <GPIO_readPin+0xf6>
    12c4:	5f c0       	rjmp	.+190    	; 0x1384 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12c6:	e9 e3       	ldi	r30, 0x39	; 57
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	88 2f       	mov	r24, r24
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <GPIO_readPin+0x7e>
    12da:	55 95       	asr	r21
    12dc:	47 95       	ror	r20
    12de:	8a 95       	dec	r24
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <GPIO_readPin+0x7a>
    12e2:	ca 01       	movw	r24, r20
    12e4:	81 70       	andi	r24, 0x01	; 1
    12e6:	90 70       	andi	r25, 0x00	; 0
    12e8:	88 23       	and	r24, r24
    12ea:	19 f0       	breq	.+6      	; 0x12f2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	49 c0       	rjmp	.+146    	; 0x1384 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12f2:	19 82       	std	Y+1, r1	; 0x01
    12f4:	47 c0       	rjmp	.+142    	; 0x1384 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12f6:	e6 e3       	ldi	r30, 0x36	; 54
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a9 01       	movw	r20, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <GPIO_readPin+0xae>
    130a:	55 95       	asr	r21
    130c:	47 95       	ror	r20
    130e:	8a 95       	dec	r24
    1310:	e2 f7       	brpl	.-8      	; 0x130a <GPIO_readPin+0xaa>
    1312:	ca 01       	movw	r24, r20
    1314:	81 70       	andi	r24, 0x01	; 1
    1316:	90 70       	andi	r25, 0x00	; 0
    1318:	88 23       	and	r24, r24
    131a:	19 f0       	breq	.+6      	; 0x1322 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	31 c0       	rjmp	.+98     	; 0x1384 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1322:	19 82       	std	Y+1, r1	; 0x01
    1324:	2f c0       	rjmp	.+94     	; 0x1384 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1326:	e3 e3       	ldi	r30, 0x33	; 51
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a9 01       	movw	r20, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <GPIO_readPin+0xde>
    133a:	55 95       	asr	r21
    133c:	47 95       	ror	r20
    133e:	8a 95       	dec	r24
    1340:	e2 f7       	brpl	.-8      	; 0x133a <GPIO_readPin+0xda>
    1342:	ca 01       	movw	r24, r20
    1344:	81 70       	andi	r24, 0x01	; 1
    1346:	90 70       	andi	r25, 0x00	; 0
    1348:	88 23       	and	r24, r24
    134a:	19 f0       	breq	.+6      	; 0x1352 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	19 c0       	rjmp	.+50     	; 0x1384 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1352:	19 82       	std	Y+1, r1	; 0x01
    1354:	17 c0       	rjmp	.+46     	; 0x1384 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1356:	e0 e3       	ldi	r30, 0x30	; 48
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a9 01       	movw	r20, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_readPin+0x10e>
    136a:	55 95       	asr	r21
    136c:	47 95       	ror	r20
    136e:	8a 95       	dec	r24
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_readPin+0x10a>
    1372:	ca 01       	movw	r24, r20
    1374:	81 70       	andi	r24, 0x01	; 1
    1376:	90 70       	andi	r25, 0x00	; 0
    1378:	88 23       	and	r24, r24
    137a:	19 f0       	breq	.+6      	; 0x1382 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1382:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <GPIO_setupPortDirection+0x6>
    139c:	00 d0       	rcall	.+0      	; 0x139e <GPIO_setupPortDirection+0x8>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	90 f5       	brcc	.+100    	; 0x1410 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3c 83       	std	Y+4, r19	; 0x04
    13b4:	2b 83       	std	Y+3, r18	; 0x03
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	91 05       	cpc	r25, r1
    13be:	d1 f0       	breq	.+52     	; 0x13f4 <GPIO_setupPortDirection+0x5e>
    13c0:	2b 81       	ldd	r18, Y+3	; 0x03
    13c2:	3c 81       	ldd	r19, Y+4	; 0x04
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	2c f4       	brge	.+10     	; 0x13d4 <GPIO_setupPortDirection+0x3e>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	61 f0       	breq	.+24     	; 0x13ea <GPIO_setupPortDirection+0x54>
    13d2:	1e c0       	rjmp	.+60     	; 0x1410 <GPIO_setupPortDirection+0x7a>
    13d4:	2b 81       	ldd	r18, Y+3	; 0x03
    13d6:	3c 81       	ldd	r19, Y+4	; 0x04
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	81 f0       	breq	.+32     	; 0x13fe <GPIO_setupPortDirection+0x68>
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	83 30       	cpi	r24, 0x03	; 3
    13e4:	91 05       	cpc	r25, r1
    13e6:	81 f0       	breq	.+32     	; 0x1408 <GPIO_setupPortDirection+0x72>
    13e8:	13 c0       	rjmp	.+38     	; 0x1410 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13ea:	ea e3       	ldi	r30, 0x3A	; 58
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	80 83       	st	Z, r24
    13f2:	0e c0       	rjmp	.+28     	; 0x1410 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13f4:	e7 e3       	ldi	r30, 0x37	; 55
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	80 83       	st	Z, r24
    13fc:	09 c0       	rjmp	.+18     	; 0x1410 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13fe:	e4 e3       	ldi	r30, 0x34	; 52
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	80 83       	st	Z, r24
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1408:	e1 e3       	ldi	r30, 0x31	; 49
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <GPIO_writePort+0x6>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <GPIO_writePort+0x8>
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	84 30       	cpi	r24, 0x04	; 4
    1432:	90 f5       	brcc	.+100    	; 0x1498 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3c 83       	std	Y+4, r19	; 0x04
    143c:	2b 83       	std	Y+3, r18	; 0x03
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	d1 f0       	breq	.+52     	; 0x147c <GPIO_writePort+0x5e>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	2c f4       	brge	.+10     	; 0x145c <GPIO_writePort+0x3e>
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	61 f0       	breq	.+24     	; 0x1472 <GPIO_writePort+0x54>
    145a:	1e c0       	rjmp	.+60     	; 0x1498 <GPIO_writePort+0x7a>
    145c:	2b 81       	ldd	r18, Y+3	; 0x03
    145e:	3c 81       	ldd	r19, Y+4	; 0x04
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	81 f0       	breq	.+32     	; 0x1486 <GPIO_writePort+0x68>
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 05       	cpc	r25, r1
    146e:	81 f0       	breq	.+32     	; 0x1490 <GPIO_writePort+0x72>
    1470:	13 c0       	rjmp	.+38     	; 0x1498 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1472:	eb e3       	ldi	r30, 0x3B	; 59
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	80 83       	st	Z, r24
    147a:	0e c0       	rjmp	.+28     	; 0x1498 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    147c:	e8 e3       	ldi	r30, 0x38	; 56
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	80 83       	st	Z, r24
    1484:	09 c0       	rjmp	.+18     	; 0x1498 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1486:	e5 e3       	ldi	r30, 0x35	; 53
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	80 83       	st	Z, r24
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1490:	e2 e3       	ldi	r30, 0x32	; 50
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	80 83       	st	Z, r24
			break;
		}
	}
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <GPIO_readPort+0x6>
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <GPIO_readPort+0x8>
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14b4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	84 30       	cpi	r24, 0x04	; 4
    14ba:	90 f5       	brcc	.+100    	; 0x1520 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	3c 83       	std	Y+4, r19	; 0x04
    14c4:	2b 83       	std	Y+3, r18	; 0x03
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	91 05       	cpc	r25, r1
    14ce:	d1 f0       	breq	.+52     	; 0x1504 <GPIO_readPort+0x5e>
    14d0:	2b 81       	ldd	r18, Y+3	; 0x03
    14d2:	3c 81       	ldd	r19, Y+4	; 0x04
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	2c f4       	brge	.+10     	; 0x14e4 <GPIO_readPort+0x3e>
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	61 f0       	breq	.+24     	; 0x14fa <GPIO_readPort+0x54>
    14e2:	1e c0       	rjmp	.+60     	; 0x1520 <GPIO_readPort+0x7a>
    14e4:	2b 81       	ldd	r18, Y+3	; 0x03
    14e6:	3c 81       	ldd	r19, Y+4	; 0x04
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	81 f0       	breq	.+32     	; 0x150e <GPIO_readPort+0x68>
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	83 30       	cpi	r24, 0x03	; 3
    14f4:	91 05       	cpc	r25, r1
    14f6:	81 f0       	breq	.+32     	; 0x1518 <GPIO_readPort+0x72>
    14f8:	13 c0       	rjmp	.+38     	; 0x1520 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14fa:	e9 e3       	ldi	r30, 0x39	; 57
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	0e c0       	rjmp	.+28     	; 0x1520 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1504:	e6 e3       	ldi	r30, 0x36	; 54
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    150e:	e3 e3       	ldi	r30, 0x33	; 51
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	04 c0       	rjmp	.+8      	; 0x1520 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1518:	e0 e3       	ldi	r30, 0x30	; 48
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	60 97       	sbiw	r28, 0x10	; 16
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	64 e0       	ldi	r22, 0x04	; 4
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	65 e0       	ldi	r22, 0x05	; 5
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	66 e0       	ldi	r22, 0x06	; 6
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	67 e0       	ldi	r22, 0x07	; 7
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	62 e0       	ldi	r22, 0x02	; 2
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1576:	83 e0       	ldi	r24, 0x03	; 3
    1578:	63 e0       	ldi	r22, 0x03	; 3
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	64 e0       	ldi	r22, 0x04	; 4
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    158a:	83 e0       	ldi	r24, 0x03	; 3
    158c:	65 e0       	ldi	r22, 0x05	; 5
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1594:	1f 86       	std	Y+15, r1	; 0x0f
    1596:	b4 c0       	rjmp	.+360    	; 0x1700 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	98 2f       	mov	r25, r24
    159c:	9c 5f       	subi	r25, 0xFC	; 252
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	69 2f       	mov	r22, r25
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    15a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15aa:	98 2f       	mov	r25, r24
    15ac:	9c 5f       	subi	r25, 0xFC	; 252
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	69 2f       	mov	r22, r25
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    15b8:	18 8a       	std	Y+16, r1	; 0x10
    15ba:	22 c0       	rjmp	.+68     	; 0x1600 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    15bc:	88 89       	ldd	r24, Y+16	; 0x10
    15be:	98 2f       	mov	r25, r24
    15c0:	9e 5f       	subi	r25, 0xFE	; 254
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	69 2f       	mov	r22, r25
    15c6:	0e 94 30 09 	call	0x1260	; 0x1260 <GPIO_readPin>
    15ca:	88 23       	and	r24, r24
    15cc:	b1 f4       	brne	.+44     	; 0x15fa <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    15ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	98 2f       	mov	r25, r24
    15de:	88 89       	ldd	r24, Y+16	; 0x10
    15e0:	89 0f       	add	r24, r25
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	0e 94 85 0b 	call	0x170a	; 0x170a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    15e8:	60 96       	adiw	r28, 0x10	; 16
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    15fa:	88 89       	ldd	r24, Y+16	; 0x10
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	88 8b       	std	Y+16, r24	; 0x10
    1600:	88 89       	ldd	r24, Y+16	; 0x10
    1602:	84 30       	cpi	r24, 0x04	; 4
    1604:	d8 f2       	brcs	.-74     	; 0x15bc <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1606:	8f 85       	ldd	r24, Y+15	; 0x0f
    1608:	98 2f       	mov	r25, r24
    160a:	9c 5f       	subi	r25, 0xFC	; 252
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	69 2f       	mov	r22, r25
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 ea       	ldi	r26, 0xA0	; 160
    161c:	b0 e4       	ldi	r27, 0x40	; 64
    161e:	8b 87       	std	Y+11, r24	; 0x0b
    1620:	9c 87       	std	Y+12, r25	; 0x0c
    1622:	ad 87       	std	Y+13, r26	; 0x0d
    1624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a e7       	ldi	r20, 0x7A	; 122
    1634:	53 e4       	ldi	r21, 0x43	; 67
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8f 83       	std	Y+7, r24	; 0x07
    1640:	98 87       	std	Y+8, r25	; 0x08
    1642:	a9 87       	std	Y+9, r26	; 0x09
    1644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1646:	6f 81       	ldd	r22, Y+7	; 0x07
    1648:	78 85       	ldd	r23, Y+8	; 0x08
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e8       	ldi	r20, 0x80	; 128
    1654:	5f e3       	ldi	r21, 0x3F	; 63
    1656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    165a:	88 23       	and	r24, r24
    165c:	2c f4       	brge	.+10     	; 0x1668 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	3f c0       	rjmp	.+126    	; 0x16e6 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1668:	6f 81       	ldd	r22, Y+7	; 0x07
    166a:	78 85       	ldd	r23, Y+8	; 0x08
    166c:	89 85       	ldd	r24, Y+9	; 0x09
    166e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	3f ef       	ldi	r19, 0xFF	; 255
    1674:	4f e7       	ldi	r20, 0x7F	; 127
    1676:	57 e4       	ldi	r21, 0x47	; 71
    1678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167c:	18 16       	cp	r1, r24
    167e:	4c f5       	brge	.+82     	; 0x16d2 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1680:	6b 85       	ldd	r22, Y+11	; 0x0b
    1682:	7c 85       	ldd	r23, Y+12	; 0x0c
    1684:	8d 85       	ldd	r24, Y+13	; 0x0d
    1686:	9e 85       	ldd	r25, Y+14	; 0x0e
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e2       	ldi	r20, 0x20	; 32
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <KEYPAD_getPressedKey+0x198>
    16aa:	89 e1       	ldi	r24, 0x19	; 25
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <KEYPAD_getPressedKey+0x186>
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	69 f7       	brne	.-38     	; 0x16aa <KEYPAD_getPressedKey+0x17a>
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <KEYPAD_getPressedKey+0x1c2>
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    16fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fc:	8f 5f       	subi	r24, 0xFF	; 255
    16fe:	8f 87       	std	Y+15, r24	; 0x0f
    1700:	8f 85       	ldd	r24, Y+15	; 0x0f
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	08 f4       	brcc	.+2      	; 0x1708 <KEYPAD_getPressedKey+0x1d8>
    1706:	48 cf       	rjmp	.-368    	; 0x1598 <KEYPAD_getPressedKey+0x68>
    1708:	45 cf       	rjmp	.-374    	; 0x1594 <KEYPAD_getPressedKey+0x64>

0000170a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1718:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3c 83       	std	Y+4, r19	; 0x04
    1722:	2b 83       	std	Y+3, r18	; 0x03
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	88 30       	cpi	r24, 0x08	; 8
    172a:	91 05       	cpc	r25, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <KEYPAD_4x4_adjustKeyNumber+0x26>
    172e:	70 c0       	rjmp	.+224    	; 0x1810 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1730:	2b 81       	ldd	r18, Y+3	; 0x03
    1732:	3c 81       	ldd	r19, Y+4	; 0x04
    1734:	29 30       	cpi	r18, 0x09	; 9
    1736:	31 05       	cpc	r19, r1
    1738:	5c f5       	brge	.+86     	; 0x1790 <KEYPAD_4x4_adjustKeyNumber+0x86>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	84 30       	cpi	r24, 0x04	; 4
    1740:	91 05       	cpc	r25, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1744:	59 c0       	rjmp	.+178    	; 0x17f8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1746:	2b 81       	ldd	r18, Y+3	; 0x03
    1748:	3c 81       	ldd	r19, Y+4	; 0x04
    174a:	25 30       	cpi	r18, 0x05	; 5
    174c:	31 05       	cpc	r19, r1
    174e:	9c f4       	brge	.+38     	; 0x1776 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	82 30       	cpi	r24, 0x02	; 2
    1756:	91 05       	cpc	r25, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <KEYPAD_4x4_adjustKeyNumber+0x52>
    175a:	48 c0       	rjmp	.+144    	; 0x17ec <KEYPAD_4x4_adjustKeyNumber+0xe2>
    175c:	2b 81       	ldd	r18, Y+3	; 0x03
    175e:	3c 81       	ldd	r19, Y+4	; 0x04
    1760:	23 30       	cpi	r18, 0x03	; 3
    1762:	31 05       	cpc	r19, r1
    1764:	0c f0       	brlt	.+2      	; 0x1768 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1766:	45 c0       	rjmp	.+138    	; 0x17f2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	09 f4       	brne	.+2      	; 0x1774 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1772:	39 c0       	rjmp	.+114    	; 0x17e6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1774:	67 c0       	rjmp	.+206    	; 0x1844 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1776:	2b 81       	ldd	r18, Y+3	; 0x03
    1778:	3c 81       	ldd	r19, Y+4	; 0x04
    177a:	26 30       	cpi	r18, 0x06	; 6
    177c:	31 05       	cpc	r19, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1780:	41 c0       	rjmp	.+130    	; 0x1804 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	87 30       	cpi	r24, 0x07	; 7
    1788:	91 05       	cpc	r25, r1
    178a:	0c f0       	brlt	.+2      	; 0x178e <KEYPAD_4x4_adjustKeyNumber+0x84>
    178c:	3e c0       	rjmp	.+124    	; 0x180a <KEYPAD_4x4_adjustKeyNumber+0x100>
    178e:	37 c0       	rjmp	.+110    	; 0x17fe <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	2c 30       	cpi	r18, 0x0C	; 12
    1796:	31 05       	cpc	r19, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <KEYPAD_4x4_adjustKeyNumber+0x92>
    179a:	46 c0       	rjmp	.+140    	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	8d 30       	cpi	r24, 0x0D	; 13
    17a2:	91 05       	cpc	r25, r1
    17a4:	5c f4       	brge	.+22     	; 0x17bc <KEYPAD_4x4_adjustKeyNumber+0xb2>
    17a6:	2b 81       	ldd	r18, Y+3	; 0x03
    17a8:	3c 81       	ldd	r19, Y+4	; 0x04
    17aa:	2a 30       	cpi	r18, 0x0A	; 10
    17ac:	31 05       	cpc	r19, r1
    17ae:	b1 f1       	breq	.+108    	; 0x181c <KEYPAD_4x4_adjustKeyNumber+0x112>
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	8b 30       	cpi	r24, 0x0B	; 11
    17b6:	91 05       	cpc	r25, r1
    17b8:	a4 f5       	brge	.+104    	; 0x1822 <KEYPAD_4x4_adjustKeyNumber+0x118>
    17ba:	2d c0       	rjmp	.+90     	; 0x1816 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    17bc:	2b 81       	ldd	r18, Y+3	; 0x03
    17be:	3c 81       	ldd	r19, Y+4	; 0x04
    17c0:	2e 30       	cpi	r18, 0x0E	; 14
    17c2:	31 05       	cpc	r19, r1
    17c4:	b9 f1       	breq	.+110    	; 0x1834 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	8e 30       	cpi	r24, 0x0E	; 14
    17cc:	91 05       	cpc	r25, r1
    17ce:	7c f1       	brlt	.+94     	; 0x182e <KEYPAD_4x4_adjustKeyNumber+0x124>
    17d0:	2b 81       	ldd	r18, Y+3	; 0x03
    17d2:	3c 81       	ldd	r19, Y+4	; 0x04
    17d4:	2f 30       	cpi	r18, 0x0F	; 15
    17d6:	31 05       	cpc	r19, r1
    17d8:	79 f1       	breq	.+94     	; 0x1838 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	80 31       	cpi	r24, 0x10	; 16
    17e0:	91 05       	cpc	r25, r1
    17e2:	69 f1       	breq	.+90     	; 0x183e <KEYPAD_4x4_adjustKeyNumber+0x134>
    17e4:	2f c0       	rjmp	.+94     	; 0x1844 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    17e6:	87 e0       	ldi	r24, 0x07	; 7
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	2e c0       	rjmp	.+92     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    17ec:	88 e0       	ldi	r24, 0x08	; 8
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	2b c0       	rjmp	.+86     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    17f2:	89 e0       	ldi	r24, 0x09	; 9
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	28 c0       	rjmp	.+80     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    17f8:	8f e2       	ldi	r24, 0x2F	; 47
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	25 c0       	rjmp	.+74     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	22 c0       	rjmp	.+68     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1804:	85 e0       	ldi	r24, 0x05	; 5
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	1f c0       	rjmp	.+62     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    180a:	86 e0       	ldi	r24, 0x06	; 6
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	1c c0       	rjmp	.+56     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1810:	8a e2       	ldi	r24, 0x2A	; 42
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	19 c0       	rjmp	.+50     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	16 c0       	rjmp	.+44     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	13 c0       	rjmp	.+38     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	10 c0       	rjmp	.+32     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1828:	8d e2       	ldi	r24, 0x2D	; 45
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	0d c0       	rjmp	.+26     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    182e:	8d e0       	ldi	r24, 0x0D	; 13
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	0a c0       	rjmp	.+20     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1834:	19 82       	std	Y+1, r1	; 0x01
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1838:	8d e3       	ldi	r24, 0x3D	; 61
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    183e:	8b e2       	ldi	r24, 0x2B	; 43
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1848:	89 81       	ldd	r24, Y+1	; 0x01
} 
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	2e 97       	sbiw	r28, 0x0e	; 14
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	62 e0       	ldi	r22, 0x02	; 2
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a0 ea       	ldi	r26, 0xA0	; 160
    1886:	b1 e4       	ldi	r27, 0x41	; 65
    1888:	8b 87       	std	Y+11, r24	; 0x0b
    188a:	9c 87       	std	Y+12, r25	; 0x0c
    188c:	ad 87       	std	Y+13, r26	; 0x0d
    188e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1890:	6b 85       	ldd	r22, Y+11	; 0x0b
    1892:	7c 85       	ldd	r23, Y+12	; 0x0c
    1894:	8d 85       	ldd	r24, Y+13	; 0x0d
    1896:	9e 85       	ldd	r25, Y+14	; 0x0e
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	4a e7       	ldi	r20, 0x7A	; 122
    189e:	53 e4       	ldi	r21, 0x43	; 67
    18a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	8f 83       	std	Y+7, r24	; 0x07
    18aa:	98 87       	std	Y+8, r25	; 0x08
    18ac:	a9 87       	std	Y+9, r26	; 0x09
    18ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18b0:	6f 81       	ldd	r22, Y+7	; 0x07
    18b2:	78 85       	ldd	r23, Y+8	; 0x08
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <LCD_init+0x7a>
		__ticks = 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
    18d0:	3f c0       	rjmp	.+126    	; 0x1950 <LCD_init+0xf8>
	else if (__tmp > 65535)
    18d2:	6f 81       	ldd	r22, Y+7	; 0x07
    18d4:	78 85       	ldd	r23, Y+8	; 0x08
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	3f ef       	ldi	r19, 0xFF	; 255
    18de:	4f e7       	ldi	r20, 0x7F	; 127
    18e0:	57 e4       	ldi	r21, 0x47	; 71
    18e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	4c f5       	brge	.+82     	; 0x193c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e2       	ldi	r20, 0x20	; 32
    18f8:	51 e4       	ldi	r21, 0x41	; 65
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <LCD_init+0xda>
    1914:	89 e1       	ldi	r24, 0x19	; 25
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9c 83       	std	Y+4, r25	; 0x04
    191a:	8b 83       	std	Y+3, r24	; 0x03
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_init+0xc8>
    1924:	9c 83       	std	Y+4, r25	; 0x04
    1926:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1928:	8d 81       	ldd	r24, Y+5	; 0x05
    192a:	9e 81       	ldd	r25, Y+6	; 0x06
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	69 f7       	brne	.-38     	; 0x1914 <LCD_init+0xbc>
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193c:	6f 81       	ldd	r22, Y+7	; 0x07
    193e:	78 85       	ldd	r23, Y+8	; 0x08
    1940:	89 85       	ldd	r24, Y+9	; 0x09
    1942:	9a 85       	ldd	r25, Y+10	; 0x0a
    1944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9e 83       	std	Y+6, r25	; 0x06
    194e:	8d 83       	std	Y+5, r24	; 0x05
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <LCD_init+0x104>
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	63 e0       	ldi	r22, 0x03	; 3
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	64 e0       	ldi	r22, 0x04	; 4
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	65 e0       	ldi	r22, 0x05	; 5
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	66 e0       	ldi	r22, 0x06	; 6
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    198c:	83 e3       	ldi	r24, 0x33	; 51
    198e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1992:	82 e3       	ldi	r24, 0x32	; 50
    1994:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1998:	88 e2       	ldi	r24, 0x28	; 40
    199a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    199e:	8c e0       	ldi	r24, 0x0C	; 12
    19a0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_sendCommand>
}
    19aa:	2e 96       	adiw	r28, 0x0e	; 14
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	c3 56       	subi	r28, 0x63	; 99
    19ca:	d0 40       	sbci	r29, 0x00	; 0
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	fe 01       	movw	r30, r28
    19d8:	ed 59       	subi	r30, 0x9D	; 157
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    19e8:	fe 01       	movw	r30, r28
    19ea:	e1 5a       	subi	r30, 0xA1	; 161
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 e8       	ldi	r26, 0x80	; 128
    19f4:	bf e3       	ldi	r27, 0x3F	; 63
    19f6:	80 83       	st	Z, r24
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	a2 83       	std	Z+2, r26	; 0x02
    19fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fe:	8e 01       	movw	r16, r28
    1a00:	05 5a       	subi	r16, 0xA5	; 165
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	fe 01       	movw	r30, r28
    1a06:	e1 5a       	subi	r30, 0xA1	; 161
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a e7       	ldi	r20, 0x7A	; 122
    1a18:	53 e4       	ldi	r21, 0x43	; 67
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	f8 01       	movw	r30, r16
    1a24:	80 83       	st	Z, r24
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	a2 83       	std	Z+2, r26	; 0x02
    1a2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e5 5a       	subi	r30, 0xA5	; 165
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	44 f4       	brge	.+16     	; 0x1a5a <LCD_sendCommand+0x9e>
		__ticks = 1;
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e7 5a       	subi	r30, 0xA7	; 167
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
    1a58:	64 c0       	rjmp	.+200    	; 0x1b22 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e5 5a       	subi	r30, 0xA5	; 165
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	0c f0       	brlt	.+2      	; 0x1a7a <LCD_sendCommand+0xbe>
    1a78:	43 c0       	rjmp	.+134    	; 0x1b00 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e1 5a       	subi	r30, 0xA1	; 161
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	8e 01       	movw	r16, r28
    1a9a:	07 5a       	subi	r16, 0xA7	; 167
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	bc 01       	movw	r22, r24
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	f8 01       	movw	r30, r16
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
    1ab0:	1f c0       	rjmp	.+62     	; 0x1af0 <LCD_sendCommand+0x134>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e9 5a       	subi	r30, 0xA9	; 169
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	89 e1       	ldi	r24, 0x19	; 25
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	91 83       	std	Z+1, r25	; 0x01
    1abe:	80 83       	st	Z, r24
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e9 5a       	subi	r30, 0xA9	; 169
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_sendCommand+0x10e>
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e9 5a       	subi	r30, 0xA9	; 169
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	de 01       	movw	r26, r28
    1ada:	a7 5a       	subi	r26, 0xA7	; 167
    1adc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e7 5a       	subi	r30, 0xA7	; 167
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	11 96       	adiw	r26, 0x01	; 1
    1aec:	9c 93       	st	X, r25
    1aee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af0:	fe 01       	movw	r30, r28
    1af2:	e7 5a       	subi	r30, 0xA7	; 167
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	d1 f6       	brne	.-76     	; 0x1ab2 <LCD_sendCommand+0xf6>
    1afe:	27 c0       	rjmp	.+78     	; 0x1b4e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b00:	8e 01       	movw	r16, r28
    1b02:	07 5a       	subi	r16, 0xA7	; 167
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	fe 01       	movw	r30, r28
    1b08:	e5 5a       	subi	r30, 0xA5	; 165
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
    1b22:	de 01       	movw	r26, r28
    1b24:	ab 5a       	subi	r26, 0xAB	; 171
    1b26:	bf 4f       	sbci	r27, 0xFF	; 255
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e7 5a       	subi	r30, 0xA7	; 167
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	91 81       	ldd	r25, Z+1	; 0x01
    1b32:	8d 93       	st	X+, r24
    1b34:	9c 93       	st	X, r25
    1b36:	fe 01       	movw	r30, r28
    1b38:	eb 5a       	subi	r30, 0xAB	; 171
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 81       	ld	r24, Z
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_sendCommand+0x184>
    1b44:	fe 01       	movw	r30, r28
    1b46:	eb 5a       	subi	r30, 0xAB	; 171
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	ef 5a       	subi	r30, 0xAF	; 175
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e8       	ldi	r26, 0x80	; 128
    1b64:	bf e3       	ldi	r27, 0x3F	; 63
    1b66:	80 83       	st	Z, r24
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	a2 83       	std	Z+2, r26	; 0x02
    1b6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6e:	8e 01       	movw	r16, r28
    1b70:	03 5b       	subi	r16, 0xB3	; 179
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	fe 01       	movw	r30, r28
    1b76:	ef 5a       	subi	r30, 0xAF	; 175
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	4a e7       	ldi	r20, 0x7A	; 122
    1b88:	53 e4       	ldi	r21, 0x43	; 67
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	f8 01       	movw	r30, r16
    1b94:	80 83       	st	Z, r24
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	a2 83       	std	Z+2, r26	; 0x02
    1b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e3 5b       	subi	r30, 0xB3	; 179
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e8       	ldi	r20, 0x80	; 128
    1bb0:	5f e3       	ldi	r21, 0x3F	; 63
    1bb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb6:	88 23       	and	r24, r24
    1bb8:	44 f4       	brge	.+16     	; 0x1bca <LCD_sendCommand+0x20e>
		__ticks = 1;
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e5 5b       	subi	r30, 0xB5	; 181
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
    1bc8:	64 c0       	rjmp	.+200    	; 0x1c92 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e3 5b       	subi	r30, 0xB3	; 179
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	0c f0       	brlt	.+2      	; 0x1bea <LCD_sendCommand+0x22e>
    1be8:	43 c0       	rjmp	.+134    	; 0x1c70 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	fe 01       	movw	r30, r28
    1bec:	ef 5a       	subi	r30, 0xAF	; 175
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	60 81       	ld	r22, Z
    1bf2:	71 81       	ldd	r23, Z+1	; 0x01
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8e 01       	movw	r16, r28
    1c0a:	05 5b       	subi	r16, 0xB5	; 181
    1c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	80 83       	st	Z, r24
    1c20:	1f c0       	rjmp	.+62     	; 0x1c60 <LCD_sendCommand+0x2a4>
    1c22:	fe 01       	movw	r30, r28
    1c24:	e7 5b       	subi	r30, 0xB7	; 183
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	89 e1       	ldi	r24, 0x19	; 25
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
    1c30:	fe 01       	movw	r30, r28
    1c32:	e7 5b       	subi	r30, 0xB7	; 183
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 81       	ld	r24, Z
    1c38:	91 81       	ldd	r25, Z+1	; 0x01
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <LCD_sendCommand+0x27e>
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e7 5b       	subi	r30, 0xB7	; 183
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	de 01       	movw	r26, r28
    1c4a:	a5 5b       	subi	r26, 0xB5	; 181
    1c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e5 5b       	subi	r30, 0xB5	; 181
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 81       	ld	r24, Z
    1c56:	91 81       	ldd	r25, Z+1	; 0x01
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	11 96       	adiw	r26, 0x01	; 1
    1c5c:	9c 93       	st	X, r25
    1c5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c60:	fe 01       	movw	r30, r28
    1c62:	e5 5b       	subi	r30, 0xB5	; 181
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	d1 f6       	brne	.-76     	; 0x1c22 <LCD_sendCommand+0x266>
    1c6e:	27 c0       	rjmp	.+78     	; 0x1cbe <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	8e 01       	movw	r16, r28
    1c72:	05 5b       	subi	r16, 0xB5	; 181
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	e3 5b       	subi	r30, 0xB3	; 179
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	60 81       	ld	r22, Z
    1c7e:	71 81       	ldd	r23, Z+1	; 0x01
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	93 81       	ldd	r25, Z+3	; 0x03
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
    1c92:	de 01       	movw	r26, r28
    1c94:	a9 5b       	subi	r26, 0xB9	; 185
    1c96:	bf 4f       	sbci	r27, 0xFF	; 255
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e5 5b       	subi	r30, 0xB5	; 181
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	8d 93       	st	X+, r24
    1ca4:	9c 93       	st	X, r25
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e9 5b       	subi	r30, 0xB9	; 185
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_sendCommand+0x2f4>
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e9 5b       	subi	r30, 0xB9	; 185
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ed 59       	subi	r30, 0x9D	; 157
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	80 71       	andi	r24, 0x10	; 16
    1ccc:	90 70       	andi	r25, 0x00	; 0
    1cce:	95 95       	asr	r25
    1cd0:	87 95       	ror	r24
    1cd2:	95 95       	asr	r25
    1cd4:	87 95       	ror	r24
    1cd6:	95 95       	asr	r25
    1cd8:	87 95       	ror	r24
    1cda:	95 95       	asr	r25
    1cdc:	87 95       	ror	r24
    1cde:	98 2f       	mov	r25, r24
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	63 e0       	ldi	r22, 0x03	; 3
    1ce4:	49 2f       	mov	r20, r25
    1ce6:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1cea:	fe 01       	movw	r30, r28
    1cec:	ed 59       	subi	r30, 0x9D	; 157
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	80 72       	andi	r24, 0x20	; 32
    1cf8:	90 70       	andi	r25, 0x00	; 0
    1cfa:	95 95       	asr	r25
    1cfc:	87 95       	ror	r24
    1cfe:	95 95       	asr	r25
    1d00:	87 95       	ror	r24
    1d02:	95 95       	asr	r25
    1d04:	87 95       	ror	r24
    1d06:	95 95       	asr	r25
    1d08:	87 95       	ror	r24
    1d0a:	95 95       	asr	r25
    1d0c:	87 95       	ror	r24
    1d0e:	98 2f       	mov	r25, r24
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	64 e0       	ldi	r22, 0x04	; 4
    1d14:	49 2f       	mov	r20, r25
    1d16:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ed 59       	subi	r30, 0x9D	; 157
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	80 81       	ld	r24, Z
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	80 74       	andi	r24, 0x40	; 64
    1d28:	90 70       	andi	r25, 0x00	; 0
    1d2a:	08 2e       	mov	r0, r24
    1d2c:	89 2f       	mov	r24, r25
    1d2e:	00 0c       	add	r0, r0
    1d30:	88 1f       	adc	r24, r24
    1d32:	99 0b       	sbc	r25, r25
    1d34:	00 0c       	add	r0, r0
    1d36:	88 1f       	adc	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	98 2f       	mov	r25, r24
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	65 e0       	ldi	r22, 0x05	; 5
    1d40:	49 2f       	mov	r20, r25
    1d42:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1d46:	fe 01       	movw	r30, r28
    1d48:	ed 59       	subi	r30, 0x9D	; 157
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	80 81       	ld	r24, Z
    1d4e:	98 2f       	mov	r25, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	99 27       	eor	r25, r25
    1d54:	99 1f       	adc	r25, r25
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	66 e0       	ldi	r22, 0x06	; 6
    1d5a:	49 2f       	mov	r20, r25
    1d5c:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    1d60:	fe 01       	movw	r30, r28
    1d62:	ed 5b       	subi	r30, 0xBD	; 189
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e8       	ldi	r26, 0x80	; 128
    1d6c:	bf e3       	ldi	r27, 0x3F	; 63
    1d6e:	80 83       	st	Z, r24
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	a2 83       	std	Z+2, r26	; 0x02
    1d74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d76:	8e 01       	movw	r16, r28
    1d78:	01 5c       	subi	r16, 0xC1	; 193
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ed 5b       	subi	r30, 0xBD	; 189
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	a2 83       	std	Z+2, r26	; 0x02
    1da2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da4:	fe 01       	movw	r30, r28
    1da6:	ff 96       	adiw	r30, 0x3f	; 63
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <LCD_sendCommand+0x40e>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9e af       	std	Y+62, r25	; 0x3e
    1dc6:	8d af       	std	Y+61, r24	; 0x3d
    1dc8:	46 c0       	rjmp	.+140    	; 0x1e56 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ff 96       	adiw	r30, 0x3f	; 63
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	64 f5       	brge	.+88     	; 0x1e3e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	fe 01       	movw	r30, r28
    1de8:	ed 5b       	subi	r30, 0xBD	; 189
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e af       	std	Y+62, r25	; 0x3e
    1e12:	8d af       	std	Y+61, r24	; 0x3d
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <LCD_sendCommand+0x478>
    1e16:	89 e1       	ldi	r24, 0x19	; 25
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c af       	std	Y+60, r25	; 0x3c
    1e1c:	8b af       	std	Y+59, r24	; 0x3b
    1e1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e20:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <LCD_sendCommand+0x466>
    1e26:	9c af       	std	Y+60, r25	; 0x3c
    1e28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e af       	std	Y+62, r25	; 0x3e
    1e32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <LCD_sendCommand+0x45a>
    1e3c:	16 c0       	rjmp	.+44     	; 0x1e6a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ff 96       	adiw	r30, 0x3f	; 63
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e af       	std	Y+62, r25	; 0x3e
    1e54:	8d af       	std	Y+61, r24	; 0x3d
    1e56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e5a:	9a af       	std	Y+58, r25	; 0x3a
    1e5c:	89 af       	std	Y+57, r24	; 0x39
    1e5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e60:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_sendCommand+0x4a6>
    1e66:	9a af       	std	Y+58, r25	; 0x3a
    1e68:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a0 e8       	ldi	r26, 0x80	; 128
    1e7a:	bf e3       	ldi	r27, 0x3F	; 63
    1e7c:	8d ab       	std	Y+53, r24	; 0x35
    1e7e:	9e ab       	std	Y+54, r25	; 0x36
    1e80:	af ab       	std	Y+55, r26	; 0x37
    1e82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	6d a9       	ldd	r22, Y+53	; 0x35
    1e86:	7e a9       	ldd	r23, Y+54	; 0x36
    1e88:	8f a9       	ldd	r24, Y+55	; 0x37
    1e8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a e7       	ldi	r20, 0x7A	; 122
    1e92:	53 e4       	ldi	r21, 0x43	; 67
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	89 ab       	std	Y+49, r24	; 0x31
    1e9e:	9a ab       	std	Y+50, r25	; 0x32
    1ea0:	ab ab       	std	Y+51, r26	; 0x33
    1ea2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ea4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eaa:	9c a9       	ldd	r25, Y+52	; 0x34
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	98 ab       	std	Y+48, r25	; 0x30
    1ec2:	8f a7       	std	Y+47, r24	; 0x2f
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1ec6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eca:	8b a9       	ldd	r24, Y+51	; 0x33
    1ecc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	98 ab       	std	Y+48, r25	; 0x30
    1f04:	8f a7       	std	Y+47, r24	; 0x2f
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <LCD_sendCommand+0x56a>
    1f08:	89 e1       	ldi	r24, 0x19	; 25
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9e a7       	std	Y+46, r25	; 0x2e
    1f0e:	8d a7       	std	Y+45, r24	; 0x2d
    1f10:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f12:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_sendCommand+0x558>
    1f18:	9e a7       	std	Y+46, r25	; 0x2e
    1f1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	98 ab       	std	Y+48, r25	; 0x30
    1f24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f28:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <LCD_sendCommand+0x54c>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	69 a9       	ldd	r22, Y+49	; 0x31
    1f32:	7a a9       	ldd	r23, Y+50	; 0x32
    1f34:	8b a9       	ldd	r24, Y+51	; 0x33
    1f36:	9c a9       	ldd	r25, Y+52	; 0x34
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	98 ab       	std	Y+48, r25	; 0x30
    1f42:	8f a7       	std	Y+47, r24	; 0x2f
    1f44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f46:	98 a9       	ldd	r25, Y+48	; 0x30
    1f48:	9c a7       	std	Y+44, r25	; 0x2c
    1f4a:	8b a7       	std	Y+43, r24	; 0x2b
    1f4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_sendCommand+0x594>
    1f54:	9c a7       	std	Y+44, r25	; 0x2c
    1f56:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	62 e0       	ldi	r22, 0x02	; 2
    1f5c:	41 e0       	ldi	r20, 0x01	; 1
    1f5e:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a0 e8       	ldi	r26, 0x80	; 128
    1f68:	bf e3       	ldi	r27, 0x3F	; 63
    1f6a:	8f a3       	std	Y+39, r24	; 0x27
    1f6c:	98 a7       	std	Y+40, r25	; 0x28
    1f6e:	a9 a7       	std	Y+41, r26	; 0x29
    1f70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f72:	6f a1       	ldd	r22, Y+39	; 0x27
    1f74:	78 a5       	ldd	r23, Y+40	; 0x28
    1f76:	89 a5       	ldd	r24, Y+41	; 0x29
    1f78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	4a e7       	ldi	r20, 0x7A	; 122
    1f80:	53 e4       	ldi	r21, 0x43	; 67
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	8b a3       	std	Y+35, r24	; 0x23
    1f8c:	9c a3       	std	Y+36, r25	; 0x24
    1f8e:	ad a3       	std	Y+37, r26	; 0x25
    1f90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f92:	6b a1       	ldd	r22, Y+35	; 0x23
    1f94:	7c a1       	ldd	r23, Y+36	; 0x24
    1f96:	8d a1       	ldd	r24, Y+37	; 0x25
    1f98:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e8       	ldi	r20, 0x80	; 128
    1fa0:	5f e3       	ldi	r21, 0x3F	; 63
    1fa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa6:	88 23       	and	r24, r24
    1fa8:	2c f4       	brge	.+10     	; 0x1fb4 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9a a3       	std	Y+34, r25	; 0x22
    1fb0:	89 a3       	std	Y+33, r24	; 0x21
    1fb2:	3f c0       	rjmp	.+126    	; 0x2032 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1fb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fba:	9e a1       	ldd	r25, Y+38	; 0x26
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	3f ef       	ldi	r19, 0xFF	; 255
    1fc0:	4f e7       	ldi	r20, 0x7F	; 127
    1fc2:	57 e4       	ldi	r21, 0x47	; 71
    1fc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc8:	18 16       	cp	r1, r24
    1fca:	4c f5       	brge	.+82     	; 0x201e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fcc:	6f a1       	ldd	r22, Y+39	; 0x27
    1fce:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e2       	ldi	r20, 0x20	; 32
    1fda:	51 e4       	ldi	r21, 0x41	; 65
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9a a3       	std	Y+34, r25	; 0x22
    1ff2:	89 a3       	std	Y+33, r24	; 0x21
    1ff4:	0f c0       	rjmp	.+30     	; 0x2014 <LCD_sendCommand+0x658>
    1ff6:	89 e1       	ldi	r24, 0x19	; 25
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	98 a3       	std	Y+32, r25	; 0x20
    1ffc:	8f 8f       	std	Y+31, r24	; 0x1f
    1ffe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2000:	98 a1       	ldd	r25, Y+32	; 0x20
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <LCD_sendCommand+0x646>
    2006:	98 a3       	std	Y+32, r25	; 0x20
    2008:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200a:	89 a1       	ldd	r24, Y+33	; 0x21
    200c:	9a a1       	ldd	r25, Y+34	; 0x22
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	9a a3       	std	Y+34, r25	; 0x22
    2012:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2014:	89 a1       	ldd	r24, Y+33	; 0x21
    2016:	9a a1       	ldd	r25, Y+34	; 0x22
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	69 f7       	brne	.-38     	; 0x1ff6 <LCD_sendCommand+0x63a>
    201c:	14 c0       	rjmp	.+40     	; 0x2046 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201e:	6b a1       	ldd	r22, Y+35	; 0x23
    2020:	7c a1       	ldd	r23, Y+36	; 0x24
    2022:	8d a1       	ldd	r24, Y+37	; 0x25
    2024:	9e a1       	ldd	r25, Y+38	; 0x26
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9a a3       	std	Y+34, r25	; 0x22
    2030:	89 a3       	std	Y+33, r24	; 0x21
    2032:	89 a1       	ldd	r24, Y+33	; 0x21
    2034:	9a a1       	ldd	r25, Y+34	; 0x22
    2036:	9e 8f       	std	Y+30, r25	; 0x1e
    2038:	8d 8f       	std	Y+29, r24	; 0x1d
    203a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    203c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <LCD_sendCommand+0x682>
    2042:	9e 8f       	std	Y+30, r25	; 0x1e
    2044:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2046:	fe 01       	movw	r30, r28
    2048:	ed 59       	subi	r30, 0x9D	; 157
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	98 2f       	mov	r25, r24
    2050:	91 70       	andi	r25, 0x01	; 1
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	63 e0       	ldi	r22, 0x03	; 3
    2056:	49 2f       	mov	r20, r25
    2058:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    205c:	fe 01       	movw	r30, r28
    205e:	ed 59       	subi	r30, 0x9D	; 157
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 81       	ld	r24, Z
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	82 70       	andi	r24, 0x02	; 2
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	95 95       	asr	r25
    206e:	87 95       	ror	r24
    2070:	98 2f       	mov	r25, r24
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	64 e0       	ldi	r22, 0x04	; 4
    2076:	49 2f       	mov	r20, r25
    2078:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    207c:	fe 01       	movw	r30, r28
    207e:	ed 59       	subi	r30, 0x9D	; 157
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 81       	ld	r24, Z
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	84 70       	andi	r24, 0x04	; 4
    208a:	90 70       	andi	r25, 0x00	; 0
    208c:	95 95       	asr	r25
    208e:	87 95       	ror	r24
    2090:	95 95       	asr	r25
    2092:	87 95       	ror	r24
    2094:	98 2f       	mov	r25, r24
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	65 e0       	ldi	r22, 0x05	; 5
    209a:	49 2f       	mov	r20, r25
    209c:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    20a0:	fe 01       	movw	r30, r28
    20a2:	ed 59       	subi	r30, 0x9D	; 157
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	88 70       	andi	r24, 0x08	; 8
    20ae:	90 70       	andi	r25, 0x00	; 0
    20b0:	95 95       	asr	r25
    20b2:	87 95       	ror	r24
    20b4:	95 95       	asr	r25
    20b6:	87 95       	ror	r24
    20b8:	95 95       	asr	r25
    20ba:	87 95       	ror	r24
    20bc:	98 2f       	mov	r25, r24
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	66 e0       	ldi	r22, 0x06	; 6
    20c2:	49 2f       	mov	r20, r25
    20c4:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a0 e8       	ldi	r26, 0x80	; 128
    20ce:	bf e3       	ldi	r27, 0x3F	; 63
    20d0:	89 8f       	std	Y+25, r24	; 0x19
    20d2:	9a 8f       	std	Y+26, r25	; 0x1a
    20d4:	ab 8f       	std	Y+27, r26	; 0x1b
    20d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d8:	69 8d       	ldd	r22, Y+25	; 0x19
    20da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	4a e7       	ldi	r20, 0x7A	; 122
    20e6:	53 e4       	ldi	r21, 0x43	; 67
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	8d 8b       	std	Y+21, r24	; 0x15
    20f2:	9e 8b       	std	Y+22, r25	; 0x16
    20f4:	af 8b       	std	Y+23, r26	; 0x17
    20f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20f8:	6d 89       	ldd	r22, Y+21	; 0x15
    20fa:	7e 89       	ldd	r23, Y+22	; 0x16
    20fc:	8f 89       	ldd	r24, Y+23	; 0x17
    20fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e8       	ldi	r20, 0x80	; 128
    2106:	5f e3       	ldi	r21, 0x3F	; 63
    2108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210c:	88 23       	and	r24, r24
    210e:	2c f4       	brge	.+10     	; 0x211a <LCD_sendCommand+0x75e>
		__ticks = 1;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9c 8b       	std	Y+20, r25	; 0x14
    2116:	8b 8b       	std	Y+19, r24	; 0x13
    2118:	3f c0       	rjmp	.+126    	; 0x2198 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    211a:	6d 89       	ldd	r22, Y+21	; 0x15
    211c:	7e 89       	ldd	r23, Y+22	; 0x16
    211e:	8f 89       	ldd	r24, Y+23	; 0x17
    2120:	98 8d       	ldd	r25, Y+24	; 0x18
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	3f ef       	ldi	r19, 0xFF	; 255
    2126:	4f e7       	ldi	r20, 0x7F	; 127
    2128:	57 e4       	ldi	r21, 0x47	; 71
    212a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212e:	18 16       	cp	r1, r24
    2130:	4c f5       	brge	.+82     	; 0x2184 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2132:	69 8d       	ldd	r22, Y+25	; 0x19
    2134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2136:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2138:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e2       	ldi	r20, 0x20	; 32
    2140:	51 e4       	ldi	r21, 0x41	; 65
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	9c 8b       	std	Y+20, r25	; 0x14
    2158:	8b 8b       	std	Y+19, r24	; 0x13
    215a:	0f c0       	rjmp	.+30     	; 0x217a <LCD_sendCommand+0x7be>
    215c:	89 e1       	ldi	r24, 0x19	; 25
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9a 8b       	std	Y+18, r25	; 0x12
    2162:	89 8b       	std	Y+17, r24	; 0x11
    2164:	89 89       	ldd	r24, Y+17	; 0x11
    2166:	9a 89       	ldd	r25, Y+18	; 0x12
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_sendCommand+0x7ac>
    216c:	9a 8b       	std	Y+18, r25	; 0x12
    216e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2170:	8b 89       	ldd	r24, Y+19	; 0x13
    2172:	9c 89       	ldd	r25, Y+20	; 0x14
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	9c 8b       	std	Y+20, r25	; 0x14
    2178:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217a:	8b 89       	ldd	r24, Y+19	; 0x13
    217c:	9c 89       	ldd	r25, Y+20	; 0x14
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	69 f7       	brne	.-38     	; 0x215c <LCD_sendCommand+0x7a0>
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2184:	6d 89       	ldd	r22, Y+21	; 0x15
    2186:	7e 89       	ldd	r23, Y+22	; 0x16
    2188:	8f 89       	ldd	r24, Y+23	; 0x17
    218a:	98 8d       	ldd	r25, Y+24	; 0x18
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9c 8b       	std	Y+20, r25	; 0x14
    2196:	8b 8b       	std	Y+19, r24	; 0x13
    2198:	8b 89       	ldd	r24, Y+19	; 0x13
    219a:	9c 89       	ldd	r25, Y+20	; 0x14
    219c:	98 8b       	std	Y+16, r25	; 0x10
    219e:	8f 87       	std	Y+15, r24	; 0x0f
    21a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a2:	98 89       	ldd	r25, Y+16	; 0x10
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_sendCommand+0x7e8>
    21a8:	98 8b       	std	Y+16, r25	; 0x10
    21aa:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	62 e0       	ldi	r22, 0x02	; 2
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e8       	ldi	r26, 0x80	; 128
    21bc:	bf e3       	ldi	r27, 0x3F	; 63
    21be:	8b 87       	std	Y+11, r24	; 0x0b
    21c0:	9c 87       	std	Y+12, r25	; 0x0c
    21c2:	ad 87       	std	Y+13, r26	; 0x0d
    21c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    21cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a e7       	ldi	r20, 0x7A	; 122
    21d4:	53 e4       	ldi	r21, 0x43	; 67
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8f 83       	std	Y+7, r24	; 0x07
    21e0:	98 87       	std	Y+8, r25	; 0x08
    21e2:	a9 87       	std	Y+9, r26	; 0x09
    21e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	2c f4       	brge	.+10     	; 0x2208 <LCD_sendCommand+0x84c>
		__ticks = 1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	3f c0       	rjmp	.+126    	; 0x2286 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2208:	6f 81       	ldd	r22, Y+7	; 0x07
    220a:	78 85       	ldd	r23, Y+8	; 0x08
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	3f ef       	ldi	r19, 0xFF	; 255
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	57 e4       	ldi	r21, 0x47	; 71
    2218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	4c f5       	brge	.+82     	; 0x2272 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2220:	6b 85       	ldd	r22, Y+11	; 0x0b
    2222:	7c 85       	ldd	r23, Y+12	; 0x0c
    2224:	8d 85       	ldd	r24, Y+13	; 0x0d
    2226:	9e 85       	ldd	r25, Y+14	; 0x0e
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e2       	ldi	r20, 0x20	; 32
    222e:	51 e4       	ldi	r21, 0x41	; 65
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9e 83       	std	Y+6, r25	; 0x06
    2246:	8d 83       	std	Y+5, r24	; 0x05
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <LCD_sendCommand+0x8ac>
    224a:	89 e1       	ldi	r24, 0x19	; 25
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9c 83       	std	Y+4, r25	; 0x04
    2250:	8b 83       	std	Y+3, r24	; 0x03
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_sendCommand+0x89a>
    225a:	9c 83       	std	Y+4, r25	; 0x04
    225c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	69 f7       	brne	.-38     	; 0x224a <LCD_sendCommand+0x88e>
    2270:	14 c0       	rjmp	.+40     	; 0x229a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2272:	6f 81       	ldd	r22, Y+7	; 0x07
    2274:	78 85       	ldd	r23, Y+8	; 0x08
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <LCD_sendCommand+0x8d6>
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    229a:	cd 59       	subi	r28, 0x9D	; 157
    229c:	df 4f       	sbci	r29, 0xFF	; 255
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	08 95       	ret

000022b2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	c3 56       	subi	r28, 0x63	; 99
    22c0:	d0 40       	sbci	r29, 0x00	; 0
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	fe 01       	movw	r30, r28
    22ce:	ed 59       	subi	r30, 0x9D	; 157
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    22de:	fe 01       	movw	r30, r28
    22e0:	e1 5a       	subi	r30, 0xA1	; 161
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 e8       	ldi	r26, 0x80	; 128
    22ea:	bf e3       	ldi	r27, 0x3F	; 63
    22ec:	80 83       	st	Z, r24
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	a2 83       	std	Z+2, r26	; 0x02
    22f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	8e 01       	movw	r16, r28
    22f6:	05 5a       	subi	r16, 0xA5	; 165
    22f8:	1f 4f       	sbci	r17, 0xFF	; 255
    22fa:	fe 01       	movw	r30, r28
    22fc:	e1 5a       	subi	r30, 0xA1	; 161
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	60 81       	ld	r22, Z
    2302:	71 81       	ldd	r23, Z+1	; 0x01
    2304:	82 81       	ldd	r24, Z+2	; 0x02
    2306:	93 81       	ldd	r25, Z+3	; 0x03
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	4a e7       	ldi	r20, 0x7A	; 122
    230e:	53 e4       	ldi	r21, 0x43	; 67
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	f8 01       	movw	r30, r16
    231a:	80 83       	st	Z, r24
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	a2 83       	std	Z+2, r26	; 0x02
    2320:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2322:	fe 01       	movw	r30, r28
    2324:	e5 5a       	subi	r30, 0xA5	; 165
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	44 f4       	brge	.+16     	; 0x2350 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2340:	fe 01       	movw	r30, r28
    2342:	e7 5a       	subi	r30, 0xA7	; 167
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
    234e:	64 c0       	rjmp	.+200    	; 0x2418 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2350:	fe 01       	movw	r30, r28
    2352:	e5 5a       	subi	r30, 0xA5	; 165
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	4f e7       	ldi	r20, 0x7F	; 127
    2364:	57 e4       	ldi	r21, 0x47	; 71
    2366:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236a:	18 16       	cp	r1, r24
    236c:	0c f0       	brlt	.+2      	; 0x2370 <LCD_displayCharacter+0xbe>
    236e:	43 c0       	rjmp	.+134    	; 0x23f6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	fe 01       	movw	r30, r28
    2372:	e1 5a       	subi	r30, 0xA1	; 161
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8e 01       	movw	r16, r28
    2390:	07 5a       	subi	r16, 0xA7	; 167
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	f8 01       	movw	r30, r16
    23a2:	91 83       	std	Z+1, r25	; 0x01
    23a4:	80 83       	st	Z, r24
    23a6:	1f c0       	rjmp	.+62     	; 0x23e6 <LCD_displayCharacter+0x134>
    23a8:	fe 01       	movw	r30, r28
    23aa:	e9 5a       	subi	r30, 0xA9	; 169
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	89 e1       	ldi	r24, 0x19	; 25
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
    23b6:	fe 01       	movw	r30, r28
    23b8:	e9 5a       	subi	r30, 0xA9	; 169
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_displayCharacter+0x10e>
    23c4:	fe 01       	movw	r30, r28
    23c6:	e9 5a       	subi	r30, 0xA9	; 169
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ce:	de 01       	movw	r26, r28
    23d0:	a7 5a       	subi	r26, 0xA7	; 167
    23d2:	bf 4f       	sbci	r27, 0xFF	; 255
    23d4:	fe 01       	movw	r30, r28
    23d6:	e7 5a       	subi	r30, 0xA7	; 167
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	91 81       	ldd	r25, Z+1	; 0x01
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	11 96       	adiw	r26, 0x01	; 1
    23e2:	9c 93       	st	X, r25
    23e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e6:	fe 01       	movw	r30, r28
    23e8:	e7 5a       	subi	r30, 0xA7	; 167
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	d1 f6       	brne	.-76     	; 0x23a8 <LCD_displayCharacter+0xf6>
    23f4:	27 c0       	rjmp	.+78     	; 0x2444 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f6:	8e 01       	movw	r16, r28
    23f8:	07 5a       	subi	r16, 0xA7	; 167
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	fe 01       	movw	r30, r28
    23fe:	e5 5a       	subi	r30, 0xA5	; 165
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	60 81       	ld	r22, Z
    2404:	71 81       	ldd	r23, Z+1	; 0x01
    2406:	82 81       	ldd	r24, Z+2	; 0x02
    2408:	93 81       	ldd	r25, Z+3	; 0x03
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	f8 01       	movw	r30, r16
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
    2418:	de 01       	movw	r26, r28
    241a:	ab 5a       	subi	r26, 0xAB	; 171
    241c:	bf 4f       	sbci	r27, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	e7 5a       	subi	r30, 0xA7	; 167
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	8d 93       	st	X+, r24
    242a:	9c 93       	st	X, r25
    242c:	fe 01       	movw	r30, r28
    242e:	eb 5a       	subi	r30, 0xAB	; 171
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <LCD_displayCharacter+0x184>
    243a:	fe 01       	movw	r30, r28
    243c:	eb 5a       	subi	r30, 0xAB	; 171
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	62 e0       	ldi	r22, 0x02	; 2
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    244e:	fe 01       	movw	r30, r28
    2450:	ef 5a       	subi	r30, 0xAF	; 175
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e8       	ldi	r26, 0x80	; 128
    245a:	bf e3       	ldi	r27, 0x3F	; 63
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	8e 01       	movw	r16, r28
    2466:	03 5b       	subi	r16, 0xB3	; 179
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	fe 01       	movw	r30, r28
    246c:	ef 5a       	subi	r30, 0xAF	; 175
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a e7       	ldi	r20, 0x7A	; 122
    247e:	53 e4       	ldi	r21, 0x43	; 67
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	f8 01       	movw	r30, r16
    248a:	80 83       	st	Z, r24
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	a2 83       	std	Z+2, r26	; 0x02
    2490:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2492:	fe 01       	movw	r30, r28
    2494:	e3 5b       	subi	r30, 0xB3	; 179
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	44 f4       	brge	.+16     	; 0x24c0 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    24b0:	fe 01       	movw	r30, r28
    24b2:	e5 5b       	subi	r30, 0xB5	; 181
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	64 c0       	rjmp	.+200    	; 0x2588 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    24c0:	fe 01       	movw	r30, r28
    24c2:	e3 5b       	subi	r30, 0xB3	; 179
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	60 81       	ld	r22, Z
    24c8:	71 81       	ldd	r23, Z+1	; 0x01
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	93 81       	ldd	r25, Z+3	; 0x03
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	0c f0       	brlt	.+2      	; 0x24e0 <LCD_displayCharacter+0x22e>
    24de:	43 c0       	rjmp	.+134    	; 0x2566 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	fe 01       	movw	r30, r28
    24e2:	ef 5a       	subi	r30, 0xAF	; 175
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	60 81       	ld	r22, Z
    24e8:	71 81       	ldd	r23, Z+1	; 0x01
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	8e 01       	movw	r16, r28
    2500:	05 5b       	subi	r16, 0xB5	; 181
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	f8 01       	movw	r30, r16
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	80 83       	st	Z, r24
    2516:	1f c0       	rjmp	.+62     	; 0x2556 <LCD_displayCharacter+0x2a4>
    2518:	fe 01       	movw	r30, r28
    251a:	e7 5b       	subi	r30, 0xB7	; 183
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	89 e1       	ldi	r24, 0x19	; 25
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	80 83       	st	Z, r24
    2526:	fe 01       	movw	r30, r28
    2528:	e7 5b       	subi	r30, 0xB7	; 183
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_displayCharacter+0x27e>
    2534:	fe 01       	movw	r30, r28
    2536:	e7 5b       	subi	r30, 0xB7	; 183
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	de 01       	movw	r26, r28
    2540:	a5 5b       	subi	r26, 0xB5	; 181
    2542:	bf 4f       	sbci	r27, 0xFF	; 255
    2544:	fe 01       	movw	r30, r28
    2546:	e5 5b       	subi	r30, 0xB5	; 181
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	11 96       	adiw	r26, 0x01	; 1
    2552:	9c 93       	st	X, r25
    2554:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	fe 01       	movw	r30, r28
    2558:	e5 5b       	subi	r30, 0xB5	; 181
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	d1 f6       	brne	.-76     	; 0x2518 <LCD_displayCharacter+0x266>
    2564:	27 c0       	rjmp	.+78     	; 0x25b4 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	8e 01       	movw	r16, r28
    2568:	05 5b       	subi	r16, 0xB5	; 181
    256a:	1f 4f       	sbci	r17, 0xFF	; 255
    256c:	fe 01       	movw	r30, r28
    256e:	e3 5b       	subi	r30, 0xB3	; 179
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	60 81       	ld	r22, Z
    2574:	71 81       	ldd	r23, Z+1	; 0x01
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	f8 01       	movw	r30, r16
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	80 83       	st	Z, r24
    2588:	de 01       	movw	r26, r28
    258a:	a9 5b       	subi	r26, 0xB9	; 185
    258c:	bf 4f       	sbci	r27, 0xFF	; 255
    258e:	fe 01       	movw	r30, r28
    2590:	e5 5b       	subi	r30, 0xB5	; 181
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	8d 93       	st	X+, r24
    259a:	9c 93       	st	X, r25
    259c:	fe 01       	movw	r30, r28
    259e:	e9 5b       	subi	r30, 0xB9	; 185
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_displayCharacter+0x2f4>
    25aa:	fe 01       	movw	r30, r28
    25ac:	e9 5b       	subi	r30, 0xB9	; 185
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    25b4:	fe 01       	movw	r30, r28
    25b6:	ed 59       	subi	r30, 0x9D	; 157
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	80 71       	andi	r24, 0x10	; 16
    25c2:	90 70       	andi	r25, 0x00	; 0
    25c4:	95 95       	asr	r25
    25c6:	87 95       	ror	r24
    25c8:	95 95       	asr	r25
    25ca:	87 95       	ror	r24
    25cc:	95 95       	asr	r25
    25ce:	87 95       	ror	r24
    25d0:	95 95       	asr	r25
    25d2:	87 95       	ror	r24
    25d4:	98 2f       	mov	r25, r24
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	63 e0       	ldi	r22, 0x03	; 3
    25da:	49 2f       	mov	r20, r25
    25dc:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    25e0:	fe 01       	movw	r30, r28
    25e2:	ed 59       	subi	r30, 0x9D	; 157
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	88 2f       	mov	r24, r24
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	80 72       	andi	r24, 0x20	; 32
    25ee:	90 70       	andi	r25, 0x00	; 0
    25f0:	95 95       	asr	r25
    25f2:	87 95       	ror	r24
    25f4:	95 95       	asr	r25
    25f6:	87 95       	ror	r24
    25f8:	95 95       	asr	r25
    25fa:	87 95       	ror	r24
    25fc:	95 95       	asr	r25
    25fe:	87 95       	ror	r24
    2600:	95 95       	asr	r25
    2602:	87 95       	ror	r24
    2604:	98 2f       	mov	r25, r24
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	64 e0       	ldi	r22, 0x04	; 4
    260a:	49 2f       	mov	r20, r25
    260c:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2610:	fe 01       	movw	r30, r28
    2612:	ed 59       	subi	r30, 0x9D	; 157
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 81       	ld	r24, Z
    2618:	88 2f       	mov	r24, r24
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	80 74       	andi	r24, 0x40	; 64
    261e:	90 70       	andi	r25, 0x00	; 0
    2620:	08 2e       	mov	r0, r24
    2622:	89 2f       	mov	r24, r25
    2624:	00 0c       	add	r0, r0
    2626:	88 1f       	adc	r24, r24
    2628:	99 0b       	sbc	r25, r25
    262a:	00 0c       	add	r0, r0
    262c:	88 1f       	adc	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	98 2f       	mov	r25, r24
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	65 e0       	ldi	r22, 0x05	; 5
    2636:	49 2f       	mov	r20, r25
    2638:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    263c:	fe 01       	movw	r30, r28
    263e:	ed 59       	subi	r30, 0x9D	; 157
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	98 2f       	mov	r25, r24
    2646:	99 1f       	adc	r25, r25
    2648:	99 27       	eor	r25, r25
    264a:	99 1f       	adc	r25, r25
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	66 e0       	ldi	r22, 0x06	; 6
    2650:	49 2f       	mov	r20, r25
    2652:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    2656:	fe 01       	movw	r30, r28
    2658:	ed 5b       	subi	r30, 0xBD	; 189
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	a0 e8       	ldi	r26, 0x80	; 128
    2662:	bf e3       	ldi	r27, 0x3F	; 63
    2664:	80 83       	st	Z, r24
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	a2 83       	std	Z+2, r26	; 0x02
    266a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266c:	8e 01       	movw	r16, r28
    266e:	01 5c       	subi	r16, 0xC1	; 193
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	fe 01       	movw	r30, r28
    2674:	ed 5b       	subi	r30, 0xBD	; 189
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a e7       	ldi	r20, 0x7A	; 122
    2686:	53 e4       	ldi	r21, 0x43	; 67
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	f8 01       	movw	r30, r16
    2692:	80 83       	st	Z, r24
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	a2 83       	std	Z+2, r26	; 0x02
    2698:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    269a:	fe 01       	movw	r30, r28
    269c:	ff 96       	adiw	r30, 0x3f	; 63
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9e af       	std	Y+62, r25	; 0x3e
    26bc:	8d af       	std	Y+61, r24	; 0x3d
    26be:	46 c0       	rjmp	.+140    	; 0x274c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    26c0:	fe 01       	movw	r30, r28
    26c2:	ff 96       	adiw	r30, 0x3f	; 63
    26c4:	60 81       	ld	r22, Z
    26c6:	71 81       	ldd	r23, Z+1	; 0x01
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	93 81       	ldd	r25, Z+3	; 0x03
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	3f ef       	ldi	r19, 0xFF	; 255
    26d0:	4f e7       	ldi	r20, 0x7F	; 127
    26d2:	57 e4       	ldi	r21, 0x47	; 71
    26d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d8:	18 16       	cp	r1, r24
    26da:	64 f5       	brge	.+88     	; 0x2734 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26dc:	fe 01       	movw	r30, r28
    26de:	ed 5b       	subi	r30, 0xBD	; 189
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e2       	ldi	r20, 0x20	; 32
    26f0:	51 e4       	ldi	r21, 0x41	; 65
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9e af       	std	Y+62, r25	; 0x3e
    2708:	8d af       	std	Y+61, r24	; 0x3d
    270a:	0f c0       	rjmp	.+30     	; 0x272a <LCD_displayCharacter+0x478>
    270c:	89 e1       	ldi	r24, 0x19	; 25
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9c af       	std	Y+60, r25	; 0x3c
    2712:	8b af       	std	Y+59, r24	; 0x3b
    2714:	8b ad       	ldd	r24, Y+59	; 0x3b
    2716:	9c ad       	ldd	r25, Y+60	; 0x3c
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_displayCharacter+0x466>
    271c:	9c af       	std	Y+60, r25	; 0x3c
    271e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2720:	8d ad       	ldd	r24, Y+61	; 0x3d
    2722:	9e ad       	ldd	r25, Y+62	; 0x3e
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	9e af       	std	Y+62, r25	; 0x3e
    2728:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272a:	8d ad       	ldd	r24, Y+61	; 0x3d
    272c:	9e ad       	ldd	r25, Y+62	; 0x3e
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	69 f7       	brne	.-38     	; 0x270c <LCD_displayCharacter+0x45a>
    2732:	16 c0       	rjmp	.+44     	; 0x2760 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2734:	fe 01       	movw	r30, r28
    2736:	ff 96       	adiw	r30, 0x3f	; 63
    2738:	60 81       	ld	r22, Z
    273a:	71 81       	ldd	r23, Z+1	; 0x01
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	9e af       	std	Y+62, r25	; 0x3e
    274a:	8d af       	std	Y+61, r24	; 0x3d
    274c:	8d ad       	ldd	r24, Y+61	; 0x3d
    274e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2750:	9a af       	std	Y+58, r25	; 0x3a
    2752:	89 af       	std	Y+57, r24	; 0x39
    2754:	89 ad       	ldd	r24, Y+57	; 0x39
    2756:	9a ad       	ldd	r25, Y+58	; 0x3a
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <LCD_displayCharacter+0x4a6>
    275c:	9a af       	std	Y+58, r25	; 0x3a
    275e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	62 e0       	ldi	r22, 0x02	; 2
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e8       	ldi	r26, 0x80	; 128
    2770:	bf e3       	ldi	r27, 0x3F	; 63
    2772:	8d ab       	std	Y+53, r24	; 0x35
    2774:	9e ab       	std	Y+54, r25	; 0x36
    2776:	af ab       	std	Y+55, r26	; 0x37
    2778:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277a:	6d a9       	ldd	r22, Y+53	; 0x35
    277c:	7e a9       	ldd	r23, Y+54	; 0x36
    277e:	8f a9       	ldd	r24, Y+55	; 0x37
    2780:	98 ad       	ldd	r25, Y+56	; 0x38
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a e7       	ldi	r20, 0x7A	; 122
    2788:	53 e4       	ldi	r21, 0x43	; 67
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	89 ab       	std	Y+49, r24	; 0x31
    2794:	9a ab       	std	Y+50, r25	; 0x32
    2796:	ab ab       	std	Y+51, r26	; 0x33
    2798:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    279a:	69 a9       	ldd	r22, Y+49	; 0x31
    279c:	7a a9       	ldd	r23, Y+50	; 0x32
    279e:	8b a9       	ldd	r24, Y+51	; 0x33
    27a0:	9c a9       	ldd	r25, Y+52	; 0x34
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	2c f4       	brge	.+10     	; 0x27bc <LCD_displayCharacter+0x50a>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	98 ab       	std	Y+48, r25	; 0x30
    27b8:	8f a7       	std	Y+47, r24	; 0x2f
    27ba:	3f c0       	rjmp	.+126    	; 0x283a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    27bc:	69 a9       	ldd	r22, Y+49	; 0x31
    27be:	7a a9       	ldd	r23, Y+50	; 0x32
    27c0:	8b a9       	ldd	r24, Y+51	; 0x33
    27c2:	9c a9       	ldd	r25, Y+52	; 0x34
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	4c f5       	brge	.+82     	; 0x2826 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d4:	6d a9       	ldd	r22, Y+53	; 0x35
    27d6:	7e a9       	ldd	r23, Y+54	; 0x36
    27d8:	8f a9       	ldd	r24, Y+55	; 0x37
    27da:	98 ad       	ldd	r25, Y+56	; 0x38
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	98 ab       	std	Y+48, r25	; 0x30
    27fa:	8f a7       	std	Y+47, r24	; 0x2f
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <LCD_displayCharacter+0x56a>
    27fe:	89 e1       	ldi	r24, 0x19	; 25
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9e a7       	std	Y+46, r25	; 0x2e
    2804:	8d a7       	std	Y+45, r24	; 0x2d
    2806:	8d a5       	ldd	r24, Y+45	; 0x2d
    2808:	9e a5       	ldd	r25, Y+46	; 0x2e
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_displayCharacter+0x558>
    280e:	9e a7       	std	Y+46, r25	; 0x2e
    2810:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	8f a5       	ldd	r24, Y+47	; 0x2f
    2814:	98 a9       	ldd	r25, Y+48	; 0x30
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	98 ab       	std	Y+48, r25	; 0x30
    281a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	8f a5       	ldd	r24, Y+47	; 0x2f
    281e:	98 a9       	ldd	r25, Y+48	; 0x30
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	69 f7       	brne	.-38     	; 0x27fe <LCD_displayCharacter+0x54c>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2826:	69 a9       	ldd	r22, Y+49	; 0x31
    2828:	7a a9       	ldd	r23, Y+50	; 0x32
    282a:	8b a9       	ldd	r24, Y+51	; 0x33
    282c:	9c a9       	ldd	r25, Y+52	; 0x34
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	98 ab       	std	Y+48, r25	; 0x30
    2838:	8f a7       	std	Y+47, r24	; 0x2f
    283a:	8f a5       	ldd	r24, Y+47	; 0x2f
    283c:	98 a9       	ldd	r25, Y+48	; 0x30
    283e:	9c a7       	std	Y+44, r25	; 0x2c
    2840:	8b a7       	std	Y+43, r24	; 0x2b
    2842:	8b a5       	ldd	r24, Y+43	; 0x2b
    2844:	9c a5       	ldd	r25, Y+44	; 0x2c
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_displayCharacter+0x594>
    284a:	9c a7       	std	Y+44, r25	; 0x2c
    284c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	62 e0       	ldi	r22, 0x02	; 2
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e8       	ldi	r26, 0x80	; 128
    285e:	bf e3       	ldi	r27, 0x3F	; 63
    2860:	8f a3       	std	Y+39, r24	; 0x27
    2862:	98 a7       	std	Y+40, r25	; 0x28
    2864:	a9 a7       	std	Y+41, r26	; 0x29
    2866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6f a1       	ldd	r22, Y+39	; 0x27
    286a:	78 a5       	ldd	r23, Y+40	; 0x28
    286c:	89 a5       	ldd	r24, Y+41	; 0x29
    286e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a e7       	ldi	r20, 0x7A	; 122
    2876:	53 e4       	ldi	r21, 0x43	; 67
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8b a3       	std	Y+35, r24	; 0x23
    2882:	9c a3       	std	Y+36, r25	; 0x24
    2884:	ad a3       	std	Y+37, r26	; 0x25
    2886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2888:	6b a1       	ldd	r22, Y+35	; 0x23
    288a:	7c a1       	ldd	r23, Y+36	; 0x24
    288c:	8d a1       	ldd	r24, Y+37	; 0x25
    288e:	9e a1       	ldd	r25, Y+38	; 0x26
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9a a3       	std	Y+34, r25	; 0x22
    28a6:	89 a3       	std	Y+33, r24	; 0x21
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    28aa:	6b a1       	ldd	r22, Y+35	; 0x23
    28ac:	7c a1       	ldd	r23, Y+36	; 0x24
    28ae:	8d a1       	ldd	r24, Y+37	; 0x25
    28b0:	9e a1       	ldd	r25, Y+38	; 0x26
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6f a1       	ldd	r22, Y+39	; 0x27
    28c4:	78 a5       	ldd	r23, Y+40	; 0x28
    28c6:	89 a5       	ldd	r24, Y+41	; 0x29
    28c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9a a3       	std	Y+34, r25	; 0x22
    28e8:	89 a3       	std	Y+33, r24	; 0x21
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <LCD_displayCharacter+0x658>
    28ec:	89 e1       	ldi	r24, 0x19	; 25
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	98 a3       	std	Y+32, r25	; 0x20
    28f2:	8f 8f       	std	Y+31, r24	; 0x1f
    28f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f6:	98 a1       	ldd	r25, Y+32	; 0x20
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_displayCharacter+0x646>
    28fc:	98 a3       	std	Y+32, r25	; 0x20
    28fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	89 a1       	ldd	r24, Y+33	; 0x21
    2902:	9a a1       	ldd	r25, Y+34	; 0x22
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9a a3       	std	Y+34, r25	; 0x22
    2908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	89 a1       	ldd	r24, Y+33	; 0x21
    290c:	9a a1       	ldd	r25, Y+34	; 0x22
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <LCD_displayCharacter+0x63a>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6b a1       	ldd	r22, Y+35	; 0x23
    2916:	7c a1       	ldd	r23, Y+36	; 0x24
    2918:	8d a1       	ldd	r24, Y+37	; 0x25
    291a:	9e a1       	ldd	r25, Y+38	; 0x26
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9a a3       	std	Y+34, r25	; 0x22
    2926:	89 a3       	std	Y+33, r24	; 0x21
    2928:	89 a1       	ldd	r24, Y+33	; 0x21
    292a:	9a a1       	ldd	r25, Y+34	; 0x22
    292c:	9e 8f       	std	Y+30, r25	; 0x1e
    292e:	8d 8f       	std	Y+29, r24	; 0x1d
    2930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <LCD_displayCharacter+0x682>
    2938:	9e 8f       	std	Y+30, r25	; 0x1e
    293a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    293c:	fe 01       	movw	r30, r28
    293e:	ed 59       	subi	r30, 0x9D	; 157
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 81       	ld	r24, Z
    2944:	98 2f       	mov	r25, r24
    2946:	91 70       	andi	r25, 0x01	; 1
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	63 e0       	ldi	r22, 0x03	; 3
    294c:	49 2f       	mov	r20, r25
    294e:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2952:	fe 01       	movw	r30, r28
    2954:	ed 59       	subi	r30, 0x9D	; 157
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 81       	ld	r24, Z
    295a:	88 2f       	mov	r24, r24
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	82 70       	andi	r24, 0x02	; 2
    2960:	90 70       	andi	r25, 0x00	; 0
    2962:	95 95       	asr	r25
    2964:	87 95       	ror	r24
    2966:	98 2f       	mov	r25, r24
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	64 e0       	ldi	r22, 0x04	; 4
    296c:	49 2f       	mov	r20, r25
    296e:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2972:	fe 01       	movw	r30, r28
    2974:	ed 59       	subi	r30, 0x9D	; 157
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	84 70       	andi	r24, 0x04	; 4
    2980:	90 70       	andi	r25, 0x00	; 0
    2982:	95 95       	asr	r25
    2984:	87 95       	ror	r24
    2986:	95 95       	asr	r25
    2988:	87 95       	ror	r24
    298a:	98 2f       	mov	r25, r24
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	65 e0       	ldi	r22, 0x05	; 5
    2990:	49 2f       	mov	r20, r25
    2992:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2996:	fe 01       	movw	r30, r28
    2998:	ed 59       	subi	r30, 0x9D	; 157
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 81       	ld	r24, Z
    299e:	88 2f       	mov	r24, r24
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	88 70       	andi	r24, 0x08	; 8
    29a4:	90 70       	andi	r25, 0x00	; 0
    29a6:	95 95       	asr	r25
    29a8:	87 95       	ror	r24
    29aa:	95 95       	asr	r25
    29ac:	87 95       	ror	r24
    29ae:	95 95       	asr	r25
    29b0:	87 95       	ror	r24
    29b2:	98 2f       	mov	r25, r24
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	66 e0       	ldi	r22, 0x06	; 6
    29b8:	49 2f       	mov	r20, r25
    29ba:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a0 e8       	ldi	r26, 0x80	; 128
    29c4:	bf e3       	ldi	r27, 0x3F	; 63
    29c6:	89 8f       	std	Y+25, r24	; 0x19
    29c8:	9a 8f       	std	Y+26, r25	; 0x1a
    29ca:	ab 8f       	std	Y+27, r26	; 0x1b
    29cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ce:	69 8d       	ldd	r22, Y+25	; 0x19
    29d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	4a e7       	ldi	r20, 0x7A	; 122
    29dc:	53 e4       	ldi	r21, 0x43	; 67
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	8d 8b       	std	Y+21, r24	; 0x15
    29e8:	9e 8b       	std	Y+22, r25	; 0x16
    29ea:	af 8b       	std	Y+23, r26	; 0x17
    29ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ee:	6d 89       	ldd	r22, Y+21	; 0x15
    29f0:	7e 89       	ldd	r23, Y+22	; 0x16
    29f2:	8f 89       	ldd	r24, Y+23	; 0x17
    29f4:	98 8d       	ldd	r25, Y+24	; 0x18
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a02:	88 23       	and	r24, r24
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	9c 8b       	std	Y+20, r25	; 0x14
    2a0c:	8b 8b       	std	Y+19, r24	; 0x13
    2a0e:	3f c0       	rjmp	.+126    	; 0x2a8e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2a10:	6d 89       	ldd	r22, Y+21	; 0x15
    2a12:	7e 89       	ldd	r23, Y+22	; 0x16
    2a14:	8f 89       	ldd	r24, Y+23	; 0x17
    2a16:	98 8d       	ldd	r25, Y+24	; 0x18
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	4c f5       	brge	.+82     	; 0x2a7a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a28:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e2       	ldi	r20, 0x20	; 32
    2a36:	51 e4       	ldi	r21, 0x41	; 65
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9c 8b       	std	Y+20, r25	; 0x14
    2a4e:	8b 8b       	std	Y+19, r24	; 0x13
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <LCD_displayCharacter+0x7be>
    2a52:	89 e1       	ldi	r24, 0x19	; 25
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9a 8b       	std	Y+18, r25	; 0x12
    2a58:	89 8b       	std	Y+17, r24	; 0x11
    2a5a:	89 89       	ldd	r24, Y+17	; 0x11
    2a5c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	f1 f7       	brne	.-4      	; 0x2a5e <LCD_displayCharacter+0x7ac>
    2a62:	9a 8b       	std	Y+18, r25	; 0x12
    2a64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a66:	8b 89       	ldd	r24, Y+19	; 0x13
    2a68:	9c 89       	ldd	r25, Y+20	; 0x14
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	9c 8b       	std	Y+20, r25	; 0x14
    2a6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a70:	8b 89       	ldd	r24, Y+19	; 0x13
    2a72:	9c 89       	ldd	r25, Y+20	; 0x14
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	69 f7       	brne	.-38     	; 0x2a52 <LCD_displayCharacter+0x7a0>
    2a78:	14 c0       	rjmp	.+40     	; 0x2aa2 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a80:	98 8d       	ldd	r25, Y+24	; 0x18
    2a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	9c 8b       	std	Y+20, r25	; 0x14
    2a8c:	8b 8b       	std	Y+19, r24	; 0x13
    2a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a90:	9c 89       	ldd	r25, Y+20	; 0x14
    2a92:	98 8b       	std	Y+16, r25	; 0x10
    2a94:	8f 87       	std	Y+15, r24	; 0x0f
    2a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a98:	98 89       	ldd	r25, Y+16	; 0x10
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <LCD_displayCharacter+0x7e8>
    2a9e:	98 8b       	std	Y+16, r25	; 0x10
    2aa0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	62 e0       	ldi	r22, 0x02	; 2
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	0e 94 45 08 	call	0x108a	; 0x108a <GPIO_writePin>
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	a0 e8       	ldi	r26, 0x80	; 128
    2ab2:	bf e3       	ldi	r27, 0x3F	; 63
    2ab4:	8b 87       	std	Y+11, r24	; 0x0b
    2ab6:	9c 87       	std	Y+12, r25	; 0x0c
    2ab8:	ad 87       	std	Y+13, r26	; 0x0d
    2aba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	4a e7       	ldi	r20, 0x7A	; 122
    2aca:	53 e4       	ldi	r21, 0x43	; 67
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	8f 83       	std	Y+7, r24	; 0x07
    2ad6:	98 87       	std	Y+8, r25	; 0x08
    2ad8:	a9 87       	std	Y+9, r26	; 0x09
    2ada:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2adc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ade:	78 85       	ldd	r23, Y+8	; 0x08
    2ae0:	89 85       	ldd	r24, Y+9	; 0x09
    2ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e8       	ldi	r20, 0x80	; 128
    2aea:	5f e3       	ldi	r21, 0x3F	; 63
    2aec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af0:	88 23       	and	r24, r24
    2af2:	2c f4       	brge	.+10     	; 0x2afe <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	9e 83       	std	Y+6, r25	; 0x06
    2afa:	8d 83       	std	Y+5, r24	; 0x05
    2afc:	3f c0       	rjmp	.+126    	; 0x2b7c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	3f ef       	ldi	r19, 0xFF	; 255
    2b0a:	4f e7       	ldi	r20, 0x7F	; 127
    2b0c:	57 e4       	ldi	r21, 0x47	; 71
    2b0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b12:	18 16       	cp	r1, r24
    2b14:	4c f5       	brge	.+82     	; 0x2b68 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e2       	ldi	r20, 0x20	; 32
    2b24:	51 e4       	ldi	r21, 0x41	; 65
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	0f c0       	rjmp	.+30     	; 0x2b5e <LCD_displayCharacter+0x8ac>
    2b40:	89 e1       	ldi	r24, 0x19	; 25
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	9c 83       	std	Y+4, r25	; 0x04
    2b46:	8b 83       	std	Y+3, r24	; 0x03
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <LCD_displayCharacter+0x89a>
    2b50:	9c 83       	std	Y+4, r25	; 0x04
    2b52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b54:	8d 81       	ldd	r24, Y+5	; 0x05
    2b56:	9e 81       	ldd	r25, Y+6	; 0x06
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	9e 83       	std	Y+6, r25	; 0x06
    2b5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b60:	9e 81       	ldd	r25, Y+6	; 0x06
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	69 f7       	brne	.-38     	; 0x2b40 <LCD_displayCharacter+0x88e>
    2b66:	14 c0       	rjmp	.+40     	; 0x2b90 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b68:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6a:	78 85       	ldd	r23, Y+8	; 0x08
    2b6c:	89 85       	ldd	r24, Y+9	; 0x09
    2b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	9e 83       	std	Y+6, r25	; 0x06
    2b7a:	8d 83       	std	Y+5, r24	; 0x05
    2b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	9a 81       	ldd	r25, Y+2	; 0x02
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <LCD_displayCharacter+0x8d6>
    2b8c:	9a 83       	std	Y+2, r25	; 0x02
    2b8e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b90:	cd 59       	subi	r28, 0x9D	; 157
    2b92:	df 4f       	sbci	r29, 0xFF	; 255
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	08 95       	ret

00002ba8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <LCD_displayString+0x6>
    2bae:	0f 92       	push	r0
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	9b 83       	std	Y+3, r25	; 0x03
    2bb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bb8:	19 82       	std	Y+1, r1	; 0x01
    2bba:	0e c0       	rjmp	.+28     	; 0x2bd8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	e2 0f       	add	r30, r18
    2bca:	f3 1f       	adc	r31, r19
    2bcc:	80 81       	ld	r24, Z
    2bce:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_displayCharacter>
		i++;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	8f 5f       	subi	r24, 0xFF	; 255
    2bd6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	fc 01       	movw	r30, r24
    2be4:	e2 0f       	add	r30, r18
    2be6:	f3 1f       	adc	r31, r19
    2be8:	80 81       	ld	r24, Z
    2bea:	88 23       	and	r24, r24
    2bec:	39 f7       	brne	.-50     	; 0x2bbc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <LCD_moveCursor+0x6>
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <LCD_moveCursor+0x8>
    2c02:	0f 92       	push	r0
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	8a 83       	std	Y+2, r24	; 0x02
    2c0a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	3d 83       	std	Y+5, r19	; 0x05
    2c14:	2c 83       	std	Y+4, r18	; 0x04
    2c16:	8c 81       	ldd	r24, Y+4	; 0x04
    2c18:	9d 81       	ldd	r25, Y+5	; 0x05
    2c1a:	81 30       	cpi	r24, 0x01	; 1
    2c1c:	91 05       	cpc	r25, r1
    2c1e:	c1 f0       	breq	.+48     	; 0x2c50 <LCD_moveCursor+0x56>
    2c20:	2c 81       	ldd	r18, Y+4	; 0x04
    2c22:	3d 81       	ldd	r19, Y+5	; 0x05
    2c24:	22 30       	cpi	r18, 0x02	; 2
    2c26:	31 05       	cpc	r19, r1
    2c28:	2c f4       	brge	.+10     	; 0x2c34 <LCD_moveCursor+0x3a>
    2c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	61 f0       	breq	.+24     	; 0x2c4a <LCD_moveCursor+0x50>
    2c32:	19 c0       	rjmp	.+50     	; 0x2c66 <LCD_moveCursor+0x6c>
    2c34:	2c 81       	ldd	r18, Y+4	; 0x04
    2c36:	3d 81       	ldd	r19, Y+5	; 0x05
    2c38:	22 30       	cpi	r18, 0x02	; 2
    2c3a:	31 05       	cpc	r19, r1
    2c3c:	69 f0       	breq	.+26     	; 0x2c58 <LCD_moveCursor+0x5e>
    2c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c40:	9d 81       	ldd	r25, Y+5	; 0x05
    2c42:	83 30       	cpi	r24, 0x03	; 3
    2c44:	91 05       	cpc	r25, r1
    2c46:	61 f0       	breq	.+24     	; 0x2c60 <LCD_moveCursor+0x66>
    2c48:	0e c0       	rjmp	.+28     	; 0x2c66 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    2c4e:	0b c0       	rjmp	.+22     	; 0x2c66 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	80 5c       	subi	r24, 0xC0	; 192
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	07 c0       	rjmp	.+14     	; 0x2c66 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	80 5f       	subi	r24, 0xF0	; 240
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	03 c0       	rjmp	.+6      	; 0x2c66 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	80 5b       	subi	r24, 0xB0	; 176
    2c64:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	80 68       	ori	r24, 0x80	; 128
    2c6a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_sendCommand>
}
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <LCD_displayStringRowColumn+0x6>
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <LCD_displayStringRowColumn+0x8>
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	6a 83       	std	Y+2, r22	; 0x02
    2c8e:	5c 83       	std	Y+4, r21	; 0x04
    2c90:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	6a 81       	ldd	r22, Y+2	; 0x02
    2c96:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_displayString>
}
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	08 95       	ret

00002cb0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	62 97       	sbiw	r28, 0x12	; 18
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	9a 8b       	std	Y+18, r25	; 0x12
    2cc6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2cc8:	89 89       	ldd	r24, Y+17	; 0x11
    2cca:	9a 89       	ldd	r25, Y+18	; 0x12
    2ccc:	9e 01       	movw	r18, r28
    2cce:	2f 5f       	subi	r18, 0xFF	; 255
    2cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd2:	b9 01       	movw	r22, r18
    2cd4:	4a e0       	ldi	r20, 0x0A	; 10
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <itoa>
   LCD_displayString(buff); /* Display the string */
    2cdc:	ce 01       	movw	r24, r28
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <LCD_displayString>
}
    2ce4:	62 96       	adiw	r28, 0x12	; 18
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	0e 94 de 0c 	call	0x19bc	; 0x19bc <LCD_sendCommand>
}
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <__udivmodqi4>:
    2d0a:	99 1b       	sub	r25, r25
    2d0c:	79 e0       	ldi	r23, 0x09	; 9
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <__udivmodqi4_ep>

00002d10 <__udivmodqi4_loop>:
    2d10:	99 1f       	adc	r25, r25
    2d12:	96 17       	cp	r25, r22
    2d14:	08 f0       	brcs	.+2      	; 0x2d18 <__udivmodqi4_ep>
    2d16:	96 1b       	sub	r25, r22

00002d18 <__udivmodqi4_ep>:
    2d18:	88 1f       	adc	r24, r24
    2d1a:	7a 95       	dec	r23
    2d1c:	c9 f7       	brne	.-14     	; 0x2d10 <__udivmodqi4_loop>
    2d1e:	80 95       	com	r24
    2d20:	08 95       	ret

00002d22 <__prologue_saves__>:
    2d22:	2f 92       	push	r2
    2d24:	3f 92       	push	r3
    2d26:	4f 92       	push	r4
    2d28:	5f 92       	push	r5
    2d2a:	6f 92       	push	r6
    2d2c:	7f 92       	push	r7
    2d2e:	8f 92       	push	r8
    2d30:	9f 92       	push	r9
    2d32:	af 92       	push	r10
    2d34:	bf 92       	push	r11
    2d36:	cf 92       	push	r12
    2d38:	df 92       	push	r13
    2d3a:	ef 92       	push	r14
    2d3c:	ff 92       	push	r15
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	ca 1b       	sub	r28, r26
    2d4c:	db 0b       	sbc	r29, r27
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	09 94       	ijmp

00002d5a <__epilogue_restores__>:
    2d5a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d5c:	39 88       	ldd	r3, Y+17	; 0x11
    2d5e:	48 88       	ldd	r4, Y+16	; 0x10
    2d60:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d62:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d64:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d66:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d68:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d6c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d6e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d70:	df 80       	ldd	r13, Y+7	; 0x07
    2d72:	ee 80       	ldd	r14, Y+6	; 0x06
    2d74:	fd 80       	ldd	r15, Y+5	; 0x05
    2d76:	0c 81       	ldd	r16, Y+4	; 0x04
    2d78:	1b 81       	ldd	r17, Y+3	; 0x03
    2d7a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d7c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d7e:	ce 0f       	add	r28, r30
    2d80:	d1 1d       	adc	r29, r1
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	ed 01       	movw	r28, r26
    2d8e:	08 95       	ret

00002d90 <itoa>:
    2d90:	fb 01       	movw	r30, r22
    2d92:	9f 01       	movw	r18, r30
    2d94:	e8 94       	clt
    2d96:	42 30       	cpi	r20, 0x02	; 2
    2d98:	c4 f0       	brlt	.+48     	; 0x2dca <itoa+0x3a>
    2d9a:	45 32       	cpi	r20, 0x25	; 37
    2d9c:	b4 f4       	brge	.+44     	; 0x2dca <itoa+0x3a>
    2d9e:	4a 30       	cpi	r20, 0x0A	; 10
    2da0:	29 f4       	brne	.+10     	; 0x2dac <itoa+0x1c>
    2da2:	97 fb       	bst	r25, 7
    2da4:	1e f4       	brtc	.+6      	; 0x2dac <itoa+0x1c>
    2da6:	90 95       	com	r25
    2da8:	81 95       	neg	r24
    2daa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dac:	64 2f       	mov	r22, r20
    2dae:	77 27       	eor	r23, r23
    2db0:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <__udivmodhi4>
    2db4:	80 5d       	subi	r24, 0xD0	; 208
    2db6:	8a 33       	cpi	r24, 0x3A	; 58
    2db8:	0c f0       	brlt	.+2      	; 0x2dbc <itoa+0x2c>
    2dba:	89 5d       	subi	r24, 0xD9	; 217
    2dbc:	81 93       	st	Z+, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	a1 f7       	brne	.-24     	; 0x2dac <itoa+0x1c>
    2dc4:	16 f4       	brtc	.+4      	; 0x2dca <itoa+0x3a>
    2dc6:	5d e2       	ldi	r21, 0x2D	; 45
    2dc8:	51 93       	st	Z+, r21
    2dca:	10 82       	st	Z, r1
    2dcc:	c9 01       	movw	r24, r18
    2dce:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <strrev>

00002dd2 <strrev>:
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	67 2f       	mov	r22, r23
    2dd8:	71 91       	ld	r23, Z+
    2dda:	77 23       	and	r23, r23
    2ddc:	e1 f7       	brne	.-8      	; 0x2dd6 <strrev+0x4>
    2dde:	32 97       	sbiw	r30, 0x02	; 2
    2de0:	04 c0       	rjmp	.+8      	; 0x2dea <strrev+0x18>
    2de2:	7c 91       	ld	r23, X
    2de4:	6d 93       	st	X+, r22
    2de6:	70 83       	st	Z, r23
    2de8:	62 91       	ld	r22, -Z
    2dea:	ae 17       	cp	r26, r30
    2dec:	bf 07       	cpc	r27, r31
    2dee:	c8 f3       	brcs	.-14     	; 0x2de2 <strrev+0x10>
    2df0:	08 95       	ret

00002df2 <__udivmodhi4>:
    2df2:	aa 1b       	sub	r26, r26
    2df4:	bb 1b       	sub	r27, r27
    2df6:	51 e1       	ldi	r21, 0x11	; 17
    2df8:	07 c0       	rjmp	.+14     	; 0x2e08 <__udivmodhi4_ep>

00002dfa <__udivmodhi4_loop>:
    2dfa:	aa 1f       	adc	r26, r26
    2dfc:	bb 1f       	adc	r27, r27
    2dfe:	a6 17       	cp	r26, r22
    2e00:	b7 07       	cpc	r27, r23
    2e02:	10 f0       	brcs	.+4      	; 0x2e08 <__udivmodhi4_ep>
    2e04:	a6 1b       	sub	r26, r22
    2e06:	b7 0b       	sbc	r27, r23

00002e08 <__udivmodhi4_ep>:
    2e08:	88 1f       	adc	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	5a 95       	dec	r21
    2e0e:	a9 f7       	brne	.-22     	; 0x2dfa <__udivmodhi4_loop>
    2e10:	80 95       	com	r24
    2e12:	90 95       	com	r25
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	08 95       	ret

00002e1a <_exit>:
    2e1a:	f8 94       	cli

00002e1c <__stop_program>:
    2e1c:	ff cf       	rjmp	.-2      	; 0x2e1c <__stop_program>
